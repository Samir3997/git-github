if(groupBulder.length()!=0) {
				query.append(SPACE);
				query.append(GROUP_BY);
				query.append(SPACE);
				String regex = "ON\\\\s+([A-Za-z0-9_\\\\.]+)\\\\s*=\\\\s*([A-Za-z0-9_\\\\.]+)";
		        Pattern pattern = Pattern.compile(regex);
		        Matcher matcher = pattern.matcher(query);
		        Set<String> groupByColumns = new LinkedHashSet<>();
		        while (matcher.find()) {
		            String leftColumn = matcher.group(1);
		            if (!groupByColumns.contains(leftColumn)) {
		                groupByColumns.add(leftColumn);
		            }
		        }
		        Iterator<String> iterator = groupByColumns.iterator();
		        while (iterator.hasNext()) {
		            query.append(iterator.next());
		            if (iterator.hasNext()) {
		            	
		                query.append(", ");
		            }
		        }
			
			}
		}
		return componentDAO.validateMeasureFormula(query.toString());




SELECT MIN(DIM_COUNTRY.D_MIS_DATE) ,MIN(DIM_CUSTOMER.D_MIS_DATE) ,MIN(DIM_INDUSTRY.D_MIS_DATE)  FROM FCT_CONSOLIDATED_ACCT_SUMMARY LEFT OUTER JOIN DIM_COUNTRY ON (FCT_CONSOLIDATED_ACCT_SUMMARY.N_COUNTRY_SKEY=DIM_COUNTRY.N_COUNTRY_SKEY) LEFT OUTER JOIN DIM_CUSTOMER ON (FCT_CONSOLIDATED_ACCT_SUMMARY.N_CUST_SKEY=DIM_CUSTOMER.N_CUST_SKEY) LEFT OUTER JOIN DIM_INDUSTRY ON (FCT_CONSOLIDATED_ACCT_SUMMARY.N_INDUSTRY_SKEY=DIM_INDUSTRY.N_INDUSTRY_SKEY) WHERE 1=0 GROUP BY





FCT_CONSOLIDATED_ACCT_SUMMARY.N_ACCT_SKEY,
    FCT_CONSOLIDATED_ACCT_SUMMARY.N_COUNTRY_SKEY,
    FCT_CONSOLIDATED_ACCT_SUMMARY.N_INDUSTRY_SKEY




























// ... existing code ...

Pattern onPattern = Pattern.compile("ON \\(([^=]+)=");
Matcher onMatcher = onPattern.matcher(query.toString());

while (onMatcher.find()) {
    String leftColumn = onMatcher.group(1).trim();
    groupByColumns.add(leftColumn);
}

// Now, append the group by clause if necessary
if (!groupByColumns.isEmpty()) {
    query.append(SPACE);
    query.append(GROUP_BY);
    query.append(SPACE);

    Iterator<String> iterator = groupByColumns.iterator();
    while (iterator.hasNext()) {
        query.append(iterator.next());
        if (iterator.hasNext()) {
            query.append(", ");
        }
    }
}

// ... rest of the code ...




if (groupBuilder.length() != 0) {
    query.append(SPACE);
    query.append(GROUP_BY);
    query.append(SPACE);

    // Use a regular expression to extract column names from the query
    Pattern onPattern = Pattern.compile("ON \\(([^=]+)=");
    Matcher onMatcher = onPattern.matcher(query.toString());

    while (onMatcher.find()) {
        String leftColumn = onMatcher.group(1).trim();
        query.append(leftColumn);
        if (onMatcher.find()) {
            query.append(", ");
        }
    }
}




if(groupBulder.length()!=0) {
				query.append(SPACE);
				query.append(GROUP_BY);
				query.append(SPACE);
		        Pattern pattern = Pattern.compile("ON \\(([^=]+)=");
		        Matcher onMatcher = pattern.matcher(query.toString());
		        while (onMatcher.find()) {
		            String leftColumn = onMatcher.group(1).trim();
		            query.append(leftColumn);
		            if (onMatcher.find()) {
		                query.append(", ");
		            }
		        }
				/*query.append(groupBulder.toString().charAt(groupBulder.toString().length()-1)==','
						?StringUtils.chop(groupBulder.toString()):groupBulder.toString());*/
			}
		}
		return componentDAO.validateMeasureFormula(query.toString());
