package com.maybank.ilm.junit.swiftmsghandlers;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.swiftmsghandlers.MXcamt05400108Handler;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.junit.config.AbstractServiceTest;
import com.prowidesoftware.swift.model.mx.MxCamt05400108;
import com.prowidesoftware.swift.model.mx.dic.AccountNotification17;
import com.prowidesoftware.swift.model.mx.dic.ActiveOrHistoricCurrencyAndAmount;
import com.prowidesoftware.swift.model.mx.dic.BankToCustomerDebitCreditNotificationV08;
import com.prowidesoftware.swift.model.mx.dic.CreditDebitCode;
import com.prowidesoftware.swift.model.mx.dic.EntryDetails9;
import com.prowidesoftware.swift.model.mx.dic.EntryTransaction10;
import com.prowidesoftware.swift.model.mx.dic.ReportEntry10;

public class MXcamt05400108HandlerTest extends AbstractServiceTest {
    private MXcamt05400108Handler handler;
    private MxCamt05400108 mxMessage;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        handler = new MXcamt05400108Handler();
        mxMessage = new MxCamt05400108();
    }

    @Test
    public void testSaveToAcctBalMgmtAndMapping() {
        // Setting up the nested objects
        BankToCustomerDebitCreditNotificationV08 notification = new BankToCustomerDebitCreditNotificationV08();
        AccountNotification17 accountNotification = new AccountNotification17();
        ReportEntry10 entry = new ReportEntry10();
        EntryDetails9 entryDetails = new EntryDetails9();
        EntryTransaction10 txDetails = new EntryTransaction10();

        // Setting values for the objects
        ActiveOrHistoricCurrencyAndAmount amount = new ActiveOrHistoricCurrencyAndAmount();
        amount.setCcy("MYR");
        amount.setValue(BigDecimal.valueOf(1000));
        entry.setAmt(amount);
        entry.setCdtDbtInd(CreditDebitCode.DBIT);

        txDetails.setAddtlTxInf("CounterPartyInfo");

        // Linking objects together
        entryDetails.getTxDtls().add(txDetails);
        entry.getNtryDtls().add(entryDetails);
        accountNotification.getNtry().add(entry);
        notification.getNtfctn().add(accountNotification);
        mxMessage.setBkToCstmrDbtCdtNtfctn(notification);

        // Now calling the method and checking values
        handler.saveToAcctBalMgmtAndMapping(mxMessage, 12345L);

        // Assert block to verify correct processing
        final EntryTransaction10 txDtls = mxMessage.getBkToCstmrDbtCdtNtfctn()
                                                    .getNtfctn().get(0)
                                                    .getNtry().get(0)
                                                    .getNtryDtls().get(0)
                                                    .getTxDtls().get(0);

        String creditDebitInd = ILMCoreConstants.DBIT; // Simulating input
        String amountSign;
        String messageType;
        String counterParty = null;

        if (creditDebitInd.contentEquals(ILMCoreConstants.DBIT)) {
            amountSign = ILMCoreConstants.MINUS;
            messageType = ILMCoreConstants.MESSAGETYPE900;
            counterParty = this.extractCounterParty(txDtls.getAddtlTxInf());
        } else {
            amountSign = ILMCoreConstants.PLUS;
            messageType = ILMCoreConstants.MESSAGETYPE910;
        }

        // Assertions to validate expected values
        assertEquals(ILMCoreConstants.MINUS, amountSign);
        assertEquals(ILMCoreConstants.MESSAGETYPE900, messageType);
        assertEquals("CounterPartyInfo", counterParty);
    }

    @Test
    public void testGetMessageType() {
        String messageType = handler.getMessageType();
        assertEquals(ILMCoreConstants.MXTYPECAMT05400108, messageType);
    }

    // Mock implementation of extractCounterParty method for testing
    private String extractCounterParty(String addtlTxInf) {
        return addtlTxInf; // Simplified for test purpose
    }
}
