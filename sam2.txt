import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface ComponentRepository {

    @Query(value = "SELECT cd.V_COMP_DEFN_NME as vCompDefnNme, " +
                   "cd.V_COMP_DEFN_ID as vCompDefnId, " +
                   "cd.N_COMP_DEFN_ID as nCompDefnId " +
                   "FROM COMPONENT_DEFN cd " +
                   "JOIN COMPONENT_REQUEST_MEASURES crm ON crm.N_COMP_DEFN_ID = cd.N_COMP_DEFN_ID " +
                   "WHERE crm.V_COMP_REQ_MEASURE_FORMULA LIKE %:formula%",
           nativeQuery = true)
    List<ComponentDto> findComponentByFormula(@Param("formula") String formula);

    @Query(value = "SELECT cd.V_COMP_DEFN_NME as vCompDefnNme, " +
                   "cd.V_COMP_DEFN_ID as vCompDefnId, " +
                   "cd.N_COMP_DEFN_ID as nCompDefnId " +
                   "FROM COMPONENT_DEFN cd " +
                   "JOIN COMPONENT_FILTER_DEFN cfd ON cfd.N_COMP_DEFN_ID = cd.N_COMP_DEFN_ID " +
                   "JOIN COMPONENT_REQUEST_MEASURES crm ON crm.N_COMP_DEFN_ID = cfd.N_COMP_DEFN_ID " +
                   "WHERE crm.V_COMP_REQ_MEASURE_FORMULA LIKE %:formula%",
           nativeQuery = true)
    List<ComponentDto> findComponentWithFilterByFormula(@Param("formula") String formula);

    @Query(value = "SELECT cd.V_COMP_DEFN_NME as vCompDefnNme, " +
                   "cd.V_COMP_DEFN_ID as vCompDefnId, " +
                   "cd.N_COMP_DEFN_ID as nCompDefnId " +
                   "FROM COMPONENT_DEFN cd " +
                   "JOIN COMPONENT_FILTER_DEFN cfd ON cfd.N_COMP_DEFN_ID = cd.N_COMP_DEFN_ID " +
                   "JOIN COMPONENT_REQUEST_MEASURES crm ON crm.N_COMP_DEFN_ID = cfd.N_COMP_DEFN_ID " +
                   "JOIN COMPONENT_HIERARCHY_DEFN chd ON chd.N_COMP_DEFN_ID = cd.N_COMP_DEFN_ID " +
                   "WHERE crm.V_COMP_REQ_MEASURE_FORMULA LIKE %:formula%",
           nativeQuery = true)
    List<ComponentDto> findComponentWithHierarchyByFormula(@Param("formula") String formula);
}






import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface PortfolioRepository {

    @Query(value = "SELECT pd.V_PORTFOLIO_DEFN_NME as vPortfolioDefnNme, " +
                   "pd.V_PORTFOLIO_DEFN_ID as vPortfolioDefnId, " +
                   "pd.N_PORTFOLIO_DEFN_ID as nPortfolioDefnId " +
                   "FROM PORTFOLIO_DEFN pd",
           nativeQuery = true)
    List<PortfolioDto> findAllPortfolios();

    @Query(value = "SELECT pd.V_PORTFOLIO_DEFN_NME as vPortfolioDefnNme, " +
                   "pd.V_PORTFOLIO_DEFN_ID as vPortfolioDefnId, " +
                   "pd.N_PORTFOLIO_DEFN_ID as nPortfolioDefnId " +
                   "FROM PORTFOLIO_DEFN pd " +
                   "JOIN PORTFOLIO_REQUEST_MEASURES prm ON prm.N_PORTFOLIO_DEFN_ID = pd.N_PORTFOLIO_DEFN_ID",
           nativeQuery = true)
    List<PortfolioDto> findPortfolioWithMeasures();

    @Query(value = "SELECT pd.V_PORTFOLIO_DEFN_NME as vPortfolioDefnNme, " +
                   "pd.V_PORTFOLIO_DEFN_ID as vPortfolioDefnId, " +
                   "pd.N_PORTFOLIO_DEFN_ID as nPortfolioDefnId " +
                   "FROM PORTFOLIO_DEFN pd " +
                   "JOIN PORTFOLIO_FILTER_DEFN pfd ON pfd.N_PORTFOLIO_DEFN_ID = pd.N_PORTFOLIO_DEFN_ID",
           nativeQuery = true)
    List<PortfolioDto> findPortfolioWithFilters();
}
