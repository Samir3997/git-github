import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.TimeZone;

public class DateUtilTest {

    @Test
    void testValidateValueDate_ValidDateBeforeCurrentDate() {
        // Given
        String dateStr = "230827"; // Date in yyMMdd format (August 27, 2023)
        
        // When
        Boolean result = validateValueDate(dateStr);

        // Then
        assertTrue(result, "Date should be before the current date.");
    }

    @Test
    void testValidateValueDate_ValidDateEqualToCurrentDate() {
        // Given
        String dateStr = LocalDate.now().format(DateTimeFormatter.ofPattern("yyMMdd"));
        
        // When
        Boolean result = validateValueDate(dateStr);

        // Then
        assertFalse(result, "Date should not be before the current date.");
    }

    @Test
    void testValidateValueDate_ValidDateAfterCurrentDate() {
        // Given
        LocalDate futureDate = LocalDate.now().plusDays(1);
        String dateStr = futureDate.format(DateTimeFormatter.ofPattern("yyMMdd"));

        // When
        Boolean result = validateValueDate(dateStr);

        // Then
        assertFalse(result, "Date should not be before the current date.");
    }

    @Test
    void testValidateValueDate_InvalidDateFormat() {
        // Given
        String invalidDateStr = "2023-08-27"; // Invalid format

        // When
        Boolean result = validateValueDate(invalidDateStr);

        // Then
        assertNull(result, "Invalid date should return null.");
    }

    private Boolean validateValueDate(String valueDt) {
        LocalDate valueDate = getDateFromString(valueDt);
        return findDtBeforeCurrenctDt(valueDate);
    }

    private static LocalDate getDateFromString(String dateString) {
        LocalDate localDate = null;
        try {
            DateTimeFormatter stringformatter = DateTimeFormatter.ofPattern("yyMMdd");
            localDate = LocalDate.parse(dateString, stringformatter);
        } catch (Exception exception) {
            // Handle exception as per your requirement
        }
        return localDate;
    }

    private static Boolean findDtBeforeCurrenctDt(LocalDate localDate) {
        Boolean pastDt = Boolean.FALSE;
        LocalDateTime currentDtTime = getCurrentDateTimeByZone(TimeZone.getDefault().getID());
        if (currentDtTime != null && localDate != null) {
            LocalDate currentDt = currentDtTime.toLocalDate();
            if (localDate.isBefore(currentDt)) {
                pastDt = Boolean.TRUE;
            }
        }
        return pastDt;
    }

    private static LocalDateTime getCurrentDateTimeByZone(String zone) {
        ZoneId zid = null;
        if (zone != null) {
            zid = ZoneId.of(zone);
        }
        return zid != null ? LocalDateTime.now(zid) : null;
    }
}
