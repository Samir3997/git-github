package com.maybank.ilm.junit.swiftmsghandlers;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.dao.DimDao;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.swiftmsghandlers.MXcamt05400108Handler;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.junit.config.AbstractServiceTest;
import com.prowidesoftware.swift.model.mx.MxCamt05400108;
import com.prowidesoftware.swift.model.mx.dic.AccountNotification17;
import com.prowidesoftware.swift.model.mx.dic.ActiveOrHistoricCurrencyAndAmount;
import com.prowidesoftware.swift.model.mx.dic.BankToCustomerDebitCreditNotificationV08;
import com.prowidesoftware.swift.model.mx.dic.EntryTransaction10;
import com.prowidesoftware.swift.model.mx.dic.ReportEntry10;

public class MXcamt05400108HandlerTest extends AbstractServiceTest{
	 @InjectMocks
	    private MXcamt05400108Handler handler;

	    @Mock
	    private EntityAccountMappingRepo eamRepo;

	    @Mock
	    private DimDao dimDao;

	    @Mock
	    private MxCamt05400108 camt05400108;

	    @Mock
	    private BankToCustomerDebitCreditNotificationV08 notification;

	    @Mock
	    private AccountNotification17 ntfctn;

	    @Mock
	    private ReportEntry10 entry;

	    @Mock
	    private EntryTransaction10 txDetails;

	    @Mock
	    private ActiveOrHistoricCurrencyAndAmount amount;

    @Before
    public void setUp() {
         MockitoAnnotations.initMocks(this);
         doSetup(handler);
     }


    @Test
   public void testSaveToAcctBalMgmtAndMapping_WithValidData() {
    	BankToCustomerDebitCreditNotificationV08 notification = new BankToCustomerDebitCreditNotificationV08();
    	camt05400108.setBkToCstmrDbtCdtNtfctn(notification);

    	AccountNotification17 accountNotification = new AccountNotification17();
    	notification.getNtfctn().add(accountNotification);

    	ReportEntry10 reportEntry = new ReportEntry10();
    	accountNotification.getNtry().add(reportEntry);

    	ActiveOrHistoricCurrencyAndAmount amount = new ActiveOrHistoricCurrencyAndAmount();
    	amount.setCcy("MYR");
    	amount.setValue(BigDecimal.valueOf(1000));
    	reportEntry.setAmt(amount);
    	assertEquals(camt05400108.getBkToCstmrDbtCdtNtfctn().getNtfctn().get(0).getNtry().get(0).getAmt().getCcy().toString(), ILMCoreConstants.MYR);
    	
    }
}
