import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verifyNoInteractions;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;

public class FolderWriterTest {

    @InjectMocks
    private FolderWriter folderWriter;

    @Mock
    private KPlusFolderRepo folderRepo;

    @Mock
    private KPlusProcessedDTO kPlusProcessedDTO;

    @Mock
    private KPlusFolder kPlusFolder;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testWriteFilesByTypeSuccess() {
        // Arrange
        when(kPlusProcessedDTO.getkPlusFolder()).thenReturn(kPlusFolder);

        // Act
        folderWriter.writeFilesByType(kPlusProcessedDTO);

        // Assert
        verify(folderRepo, times(1)).save(kPlusFolder);
    }

    @Test
    public void testWriteFilesByTypeExceptionHandling() {
        // Arrange
        when(kPlusProcessedDTO.getkPlusFolder()).thenReturn(kPlusFolder);
        doThrow(new RuntimeException("Test Exception")).when(folderRepo).save(kPlusFolder);

        // Act
        folderWriter.writeFilesByType(kPlusProcessedDTO);

        // Assert
        verify(folderRepo, times(1)).save(kPlusFolder);
        // You need to check logs to ensure they contain the expected messages
        // This might require additional setup if you use a logging framework
        // e.g., Logback's ListAppender or similar.
    }
}
