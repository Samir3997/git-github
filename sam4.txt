package com.maybank.ilm.core.swiftmsghandlers;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.maybank.ilm.entity.MTField;
import com.maybank.ilm.entity.MTSequence;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class MXMsgHandlerAbstractImplTest {

    @InjectMocks
    private MXMsgHandlerAbstractImpl msgHandler;

    @Mock
    private MTSequence mtSequence;

    @Mock
    private MTField mtField;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetNarrativesForSeqMsgs() {
        // Given
        List<MTSequence> mtSequences = new ArrayList<>();

        // Prepare test sequences
        MTSequence sequence1 = new MTSequence();
        sequence1.setSeqName("SEQ_NAME");
        sequence1.setMtFields(Arrays.asList(
                new MTField("70E_NARRATIVE_1_QUALIFIER", "Narrative 1"),
                new MTField("70E_NARRATIVE_2_QUALIFIER", "Narrative 2"),
                new MTField("70E_NARRATIVE_3_QUALIFIER", "Narrative 3")
        ));

        MTSequence sequence2 = new MTSequence();
        sequence2.setSeqName("SEQ_NAME");
        sequence2.setMtFields(Arrays.asList(
                new MTField("70E_NARRATIVE_4_QUALIFIER", "Narrative 4"),
                new MTField("70E_NARRATIVE_5_QUALIFIER", "Narrative 5")
        ));

        mtSequences.add(sequence1);
        mtSequences.add(sequence2);

        // When
        List<String> narratives = msgHandler.getNarrativesForSeqMsgs(mtSequences, "QUALIFIER", "SEQ_NAME");

        // Then
        assertEquals(5, narratives.size());
        assertEquals("Narrative 1", narratives.get(0));
        assertEquals("Narrative 2", narratives.get(1));
        assertEquals("Narrative 3", narratives.get(2));
        assertEquals("Narrative 4", narratives.get(3));
        assertEquals("Narrative 5", narratives.get(4));
    }

    @Test
    void testGetNarrativesForSeqMsgsWithEmptySequence() {
        // Given
        List<MTSequence> mtSequences = new ArrayList<>();

        // When
        List<String> narratives = msgHandler.getNarrativesForSeqMsgs(mtSequences, "QUALIFIER", "SEQ_NAME");

        // Then
        assertTrue(narratives.isEmpty());
    }

    @Test
    void testGetNarrativesForSeqMsgsWithNoMatchingQualifier() {
        // Given
        MTSequence sequence = new MTSequence();
        sequence.setSeqName("SEQ_NAME");
        sequence.setMtFields(Arrays.asList(
                new MTField("70E_NARRATIVE_1_OTHER", "Narrative 1")
        ));

        List<MTSequence> mtSequences = Arrays.asList(sequence);

        // When
        List<String> narratives = msgHandler.getNarrativesForSeqMsgs(mtSequences, "QUALIFIER", "SEQ_NAME");

        // Then
        assertTrue(narratives.isEmpty());
    }
}
