import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

public class NostroApiServiceTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ObjectMapper objectMapper;

    @InjectMocks
    private NostroApiService nostroApiService;  // Assuming this is the service containing your logic

    private HttpHeaders headers;
    private String bnyAccountNumber = "123456";
    private String retrieveHistoricalAccountBalanceApi = "http://mock-api.com/api/balance";

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Setup your headers (if necessary)
        headers = new HttpHeaders();
        headers.add("Authorization", "Bearer token");
    }

    @Test
    public void testNostroApiService_IntraDay_Success() throws Exception {
        // Mock the historical account balance response
        String mockResponseBody = "{ \"metadata\": { \"success\": true }, \"data\": { } }";  // Replace with a valid response

        // Mocking RestTemplate's exchange method
        ResponseEntity<String> mockResponseEntity = ResponseEntity.ok(mockResponseBody);
        when(restTemplate.exchange(any(String.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(mockResponseEntity);

        // Mocking ObjectMapper's readValue method to return a mock BnyApiResponseDTO
        BnyApiResponseDTO mockBnyApiResponseDTO = new BnyApiResponseDTO();
        BnyApiResponseDTO.Metadata metadata = new BnyApiResponseDTO.Metadata();
        metadata.setSuccess(true);  // Ensure the success is true
        mockBnyApiResponseDTO.setMetadata(metadata);

        when(objectMapper.readValue(eq(mockResponseBody), any(TypeReference.class)))
                .thenReturn(mockBnyApiResponseDTO);

        // Call the method under test
        nostroApiService.callNostroApi();  // Assuming the method name is callNostroApi()

        // Verify that restTemplate.exchange was called once with expected parameters
        verify(restTemplate, times(1)).exchange(any(String.class), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class));

        // Verify that objectMapper.readValue was called once to deserialize the response
        verify(objectMapper, times(1)).readValue(eq(mockResponseBody), any(TypeReference.class));

        // Add additional assertions based on your logic
        assertNotNull(mockBnyApiResponseDTO);
        assertTrue(mockBnyApiResponseDTO.getMetadata().getSuccess());
    }
}
