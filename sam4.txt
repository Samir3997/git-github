import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.dao.DimDao;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.entity.AccountBalanceAggregation;
import com.maybank.ilm.core.entity.AccountBalanceManagement;
import com.maybank.ilm.core.entity.EntityAccountMapDefinition;
import com.maybank.ilm.core.util.ConversionUtil;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.AccountBalanceMgmtDTO;
import com.maybank.ilm.entity.FinMT103;
import com.prowidesoftware.swift.model.mx.MxCamt05400108;
import com.prowidesoftware.swift.model.mx.dic.EntryTransaction10;

public class MXcamt05400108HandlerTest {

    @InjectMocks
    private MXcamt05400108Handler mxcamt05400108Handler;

    @Mock
    private EntityAccountMappingRepo eamRepo;

    @Mock
    private DimDao dimDao;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testSaveToAcctBalMgmtAndMapping_MYR_Credit() throws Exception {
        MxCamt05400108 camt05400108 = createMockMxCamt05400108("MYR", ILMCoreConstants.CREDIT);
        when(eamRepo.findByAccountNumber(any())).thenReturn(createMockEntityAccountMapDefinition());

        mxcamt05400108Handler.saveToAcctBalMgmtAndMapping(camt05400108, 1L);

        List<AccountBalanceManagement> allEntries = mxcamt05400108Handler.allEntries;
        assertNotNull(allEntries);
        assertEquals(1, allEntries.size());

        AccountBalanceManagement mgmt = allEntries.get(0);
        assertEquals(new BigDecimal("100.00"), mgmt.getAmount());
        assertEquals(ILMCoreConstants.PLUS, mgmt.getAmountSign());
        assertEquals(ILMCoreConstants.MESSAGETYPE910, mgmt.getMessageType());
    }

    @Test
    public void testSaveToAcctBalMgmtAndMapping_MYR_Debit() throws Exception {
        MxCamt05400108 camt05400108 = createMockMxCamt05400108("MYR", ILMCoreConstants.DEBIT);
        when(eamRepo.findByAccountNumber(any())).thenReturn(createMockEntityAccountMapDefinition());
        when(mxcamt05400108Handler.extractCounterParty(camt05400108.getBkToCstmrDbtCdtNtfctn().getNtfctn().get(0).getNtry().get(0).getAddtlTxInf())).thenReturn("counterParty");

        mxcamt05400108Handler.saveToAcctBalMgmtAndMapping(camt05400108, 1L);

        List<AccountBalanceManagement> allEntries = mxcamt05400108Handler.allEntries;
        assertNotNull(allEntries);
        assertEquals(1, allEntries.size());

        AccountBalanceManagement mgmt = allEntries.get(0);
        assertEquals(new BigDecimal("100












@Test
public void testSaveToAcctBalMgmtAndMapping_NostroCurrency() throws Exception {
    MxCamt05400108 camt05400108 = createMockMxCamt05400108("USD", ILMCoreConstants.CREDIT);
    when(eamRepo.findByAccountNumber(any())).thenReturn(null);
    when(eamRepo.findByEntityIdentifier(any())).thenReturn(createMockEntityAccountMapDefinition());

    mxcamt05400108Handler.saveToAcctBalMgmtAndMapping(camt05400108, 1L);

    List<AccountBalanceManagement> allEntries = mxcamt05400108Handler.allEntries;
    assertNotNull(allEntries);
    assertEquals(1, allEntries.size());

    AccountBalanceManagement mgmt = allEntries.get(0);
    assertEquals(new BigDecimal("100.00"), mgmt.getAmount());
    assertEquals(ILMCoreConstants.PLUS, mgmt.getAmountSign());
    assertEquals(ILMCoreConstants.MESSAGETYPE910, mgmt.getMessageType());
}

















@Test
public void testSaveToAcctBalMgmtAndMapping_WithIcruAmount() throws Exception {
    MxCamt05400108 camt05400108 = createMockMxCamt05400108("MYR", ILMCoreConstants.CREDIT, "ICRU/10.00");
    when(eamRepo.findByAccountNumber(any())).thenReturn(createMockEntityAccountMapDefinition());
    when(eamRepo.findByEntityIdentifier(any())).thenReturn(createMockEntityAccountMapDefinition());

    mxcamt05400108Handler.saveToAcctBalMgmtAndMapping(camt05400108, 1L);

    List<AccountBalanceManagement> allEntries = mxcamt05400108Handler.allEntries;
    assertNotNull(allEntries);
    assertEquals(2, allEntries.size()); // One for main account and one for ICRU

    AccountBalanceManagement mgmt = allEntries.get(0);
    assertEquals(new BigDecimal("100.00"), mgmt.getAmount());
    assertEquals(ILMCoreConstants.PLUS, mgmt.getAmountSign());
    assertEquals(ILMCoreConstants.MESSAGETYPE910, mgmt.getMessageType());

    AccountBalanceManagement icruMgmt = allEntries.get(1);
    assertEquals(new BigDecimal("10.00"), icruMgmt.getAmount());
    assertEquals(ILMCoreConstants.PLUS, icruMgmt.getAmountSign());
    assertEquals(ILMCoreConstants.MESSAGETYPE910, icruMgmt.getMessageType());
}






@Test
public void testSaveToAcctBalMgmtAndMapping_EntityNotFound() throws Exception {
    MxCamt05400108 camt05400108 = createMockMxCamt05400108("MYR", ILMCoreConstants.CREDIT);
    when(eamRepo.findByAccountNumber(any())).thenReturn(null);
    when(eamRepo.findByEntityIdentifier(any())).thenReturn(null);

    try {
        mxcamt05400108Handler.saveToAcctBalMgmtAndMapping(camt05400108, 1L);
        fail("Expected EntityNotFoundException");
    } catch (EntityNotFoundException e) {
        // Expected behavior
    }
}



private MxCamt05400108 createMockMxCamt05400108(String currencyCode, String creditDebitInd, String addtlTxInf) {
    // ... (create a mock MxCamt05400108 object with desired values)
    when(camt05400108.getBkToCstmrDbtCdtNtfctn().getNtfctn().get(0).getNtry().get(0).getAmt().getCcy()).thenReturn(currencyCode);
    when(camt05400108.getBkToCstmrDbtCdtNtfctn().getNtfctn().get(0).getNtry().get(0).getCdtDbtInd().value()).thenReturn(creditDebitInd);
    when(camt05400108.getBkToCstmrDbtCdtNtfctn().getNtfctn().get(0).getNtry().get(0).getAddtlTxInf()).thenReturn(addtlTxInf);
    // ... (set other necessary values)
    return camt05400108;
}

private EntityAccountMapDefinition createMockEntityAccountMapDefinition() {
    // ... (create a mock EntityAccountMapDefinition object with desired values)
    return entityAccountMapDefinition;
}



