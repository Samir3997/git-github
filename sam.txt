import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.maybank.ilm.entity.MTSequence;
import com.maybank.ilm.entity.MTField;

public class MXMsgHandlerAbstractImplTest {

    @Test
    public void testGetTotalAmountForMT535_ValidData() {
        // Create sample MT sequences with MTFields
        MTSequence sequence1 = new MTSequence();
        sequence1.setSeqName("B1");
        List<MTField> fields1 = new ArrayList<>();
        fields1.add(new MTField(1L, 123L, "93B_BALANCE_AMOUNT_AVAI", "100.00", "Decimal"));
        fields1.add(new MTField(2L, 123L, "93B_BALANCE_AMOUNT_AVAI", "200.00", "Decimal"));
        sequence1.setMtFields(fields1);

        List<MTSequence> sequences = new ArrayList<>();
        sequences.add(sequence1);

        // Call the method
        BigDecimal totalAmount = MXMsgHandlerAbstractImpl.getTotalAmountForMT535(sequences);

        // Assert the result
        assertEquals(new BigDecimal("300.00"), totalAmount);
    }

    @Test
    public void testGetTotalAmountForMT535_EmptyData() {
        List<MTSequence> sequences = new ArrayList<>();
        BigDecimal totalAmount = MXMsgHandlerAbstractImpl.getTotalAmountForMT535(sequences);
        assertEquals(BigDecimal.ZERO, totalAmount);
    }

    @Test
    public void testGetTotalAmountForMT535_InvalidData() {
        // Create a sequence with an invalid field value
        MTSequence sequence = new MTSequence();
        sequence.setSeqName("B1");
        List<MTField> fields = new ArrayList<>();
        fields.add(new MTField(1L, 123L, "93B_BALANCE_AMOUNT_AVAI", "invalid", "String"));
        sequence.setMtFields(fields);

        List<MTSequence> sequences = new ArrayList<>();
        sequences.add(sequence);

        // Call the method and expect an exception
        try {
            MXMsgHandlerAbstractImpl.getTotalAmountForMT535(sequences);
            fail("Expected NumberFormatException");
        } catch (NumberFormatException e) {
            // Expected exception
        }
    }
}
