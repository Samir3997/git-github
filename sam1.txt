	private Boolean validateValueDate(String valueDt) {
		LocalDate valueDate = DateUtil.getDateFromString(valueDt);
		return DateUtil.findDtBeforeCurrenctDt(valueDate);
	}



	public static LocalDate getDateFromString(String dateString) {
		LocalDate localDate = null;
		try {
			DateTimeFormatter stringformatter = DateTimeFormatter.ofPattern("yyMMdd");
			localDate = LocalDate.parse(dateString, stringformatter);
		} catch (Exception exception) {
			logger.info("Exception in class:DateUtil getDateFromSkey" + exception);
		}
		return localDate;
	}


public static Boolean findDtBeforeCurrenctDt(LocalDate localDate) {
		Boolean pastDt = Boolean.FALSE;
		LocalDateTime currentDtTime = getCurrentDateTimeByZone(TimeZone.getDefault().getID());
		if(currentDtTime != null && localDate != null) {
			LocalDate currentDt = currentDtTime.toLocalDate();
			if(localDate.isBefore(currentDt)) {
				pastDt = Boolean.TRUE;
			}
		}
		return pastDt;
	}

public static LocalDateTime getCurrentDateTimeByZone(String zone) {
		ZoneId zid = null;
		if (zone != null) {
			zid = ZoneId.of(zone);
		}
		return zid != null ? LocalDateTime.now(zid) : null;
	}
