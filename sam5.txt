import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.*;

public class MTFieldDataTypeMapTest {

    @InjectMocks
    private MTFieldDataTypeMap mtFieldDataTypeMap; // Class to be tested

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this); // Initialize mocks
        mtFieldDataTypeMap = new MTFieldDataTypeMap();
        mtFieldDataTypeMap.init(); // Call init method to populate maps
    }

    @Test
    public void testFieldDTMapInitialization() {
        // Test to ensure fieldDTMap is populated correctly
        Map<String, String> fieldDTMap = mtFieldDataTypeMap.getFieldDTMap();
        
        // Verify that certain values are set correctly
        assertEquals("ILMCoreConstants.STRING", fieldDTMap.get("16R_BLOCKNAME"));
        assertEquals("ILMCoreConstants.STRING", fieldDTMap.get("20C_QUALIFIER"));
        assertEquals("ILMCoreConstants.BIGDECIMAL", fieldDTMap.get("98E_DECIMALS"));
    }

    @Test
    public void testParentChildSeqMapInitialization() {
        // Test parentChildSeqMap initialization
        Map<String, List<String>> parentChildSeqMap = mtFieldDataTypeMap.getParentChildSeqMap();
        
        // Assert that key "A" has the correct value list
        assertEquals(Arrays.asList("A1_LINK_R"), parentChildSeqMap.get("A"));
        
        // Assert key "E" contains multiple values
        assertEquals(Arrays.asList("E1_SETPRTY_R", "E2_CSHPRTY_R", "E3_AMT_R"), parentChildSeqMap.get("E"));
    }

    @Test
    public void testSeqTagMapInitialization() {
        // Test seqTagMap initialization
        Map<String, List<String>> seqTagMap = mtFieldDataTypeMap.getSeqTagMap();

        // Assert the "A" key contains specific tags
        assertEquals(Arrays.asList("16R", "20C", "23G", "98A", "98C", "98E", "22F", "22H", "16S"), seqTagMap.get("A"));
    }
    
    @Test
    public void testSeqTagMap102Initialization() {
        // Test seqTagMap102 initialization
        Map<String, List<String>> seqTagMap102 = mtFieldDataTypeMap.getSeqTagMap102();

        // Assert the "A" key contains specific tags
        assertEquals(Arrays.asList("20", "23", "51A", "50A", "50F", "50K", "52A", "52B", "52C", "26T", "77B", "71A", "36"), seqTagMap102.get("A"));
    }

    @Test
    public void testInitMethodCalls() {
        // Test that init() method is correctly initializing the maps
        MTFieldDataTypeMap spyMap = spy(new MTFieldDataTypeMap());

        // Call init and verify private methods are invoked
        spyMap.init();

        verify(spyMap).setFieldDTMap();
        verify(spyMap).setParentChildSeqMap();
        verify(spyMap).setSeqTagMap();
        verify(spyMap).setSeqTagMap102();
        verify(spyMap).setSeqTagMap204();
    }
}
