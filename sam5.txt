package com.maybank.ilm.core.swiftmsghandlers;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import com.maybank.ilm.util.DateUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

class MXMsgHandlerAbstractImplTest {

    @InjectMocks
    private MXMsgHandlerAbstractImpl msgHandler;

    @Mock
    private AccountBalanceAggregation mockAccountBalanceAggregation;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAggregations() {
        // Given
        List<AccountBalanceManagement> allEntries = Arrays.asList(
                new AccountBalanceManagement(1L, BigDecimal.valueOf(100), ILMCoreConstants.PLUS, 1L, LocalDateTime.now(), LocalDate.now(), LocalDate.now(), ILMCoreConstants.MESSAGETYPE192, "SENDER1", "RECEIVER1", "TRN1", "REF1", "MYR", 'Y'),
                new AccountBalanceManagement(1L, BigDecimal.valueOf(-50), ILMCoreConstants.MINUS, 2L, LocalDateTime.now(), LocalDate.now(), LocalDate.now(), ILMCoreConstants.MESSAGETYPE192, "SENDER1", "RECEIVER1", "TRN1", "REF1", "MYR", 'N'),
                new AccountBalanceManagement(2L, BigDecimal.valueOf(200), ILMCoreConstants.PLUS, 3L, LocalDateTime.now().minusDays(1), LocalDate.now().minusDays(1), LocalDate.now().minusDays(1), ILMCoreConstants.MESSAGETYPE292, "SENDER2", "RECEIVER2", "TRN2", "REF2", "MYR", 'Y')
        );

        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // Mock static methods
        try (var mockedStaticDateUtil = mockStatic(DateUtil.class)) {
            mockedStaticDateUtil.when(() -> DateUtil.findDtEqualsCurrenctDt(any())).thenReturn(true);

            // When
            msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

            // Then
            assertEquals(2, aggregations.size()); // Assuming correct aggregations
            verify(msgHandler, times(2)).lockDBAndAggregate(any(), any(), any(), any(), any(), any(), any(), any());
        }
    }

    @Test
    void testGetAggregationsWithEmptyList() {
        // Given
        List<AccountBalanceManagement> allEntries = Collections.emptyList();
        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // When
        msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

        // Then
        assertTrue(aggregations.isEmpty());
        verifyNoInteractions(mockAccountBalanceAggregation);
    }

    @Test
    void testGetAggregationsWithNullList() {
        // Given
        List<AccountBalanceManagement> allEntries = null;
        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // When
        msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

        // Then
        assertTrue(aggregations.isEmpty());
        verifyNoInteractions(mockAccountBalanceAggregation);
    }

    @Test
    void testGetAggregationsWithDateMismatch() {
        // Given
        List<AccountBalanceManagement> allEntries = Arrays.asList(
                new AccountBalanceManagement(1L, BigDecimal.valueOf(100), ILMCoreConstants.PLUS, 1L, LocalDateTime.now(), LocalDate.now(), LocalDate.now(), ILMCoreConstants.MESSAGETYPE192, "SENDER1", "RECEIVER1", "TRN1", "REF1", "MYR", 'Y'),
                new AccountBalanceManagement(2L, BigDecimal.valueOf(-50), ILMCoreConstants.MINUS, 2L, LocalDateTime.now().minusDays(1), LocalDate.now().minusDays(1), LocalDate.now().minusDays(1), ILMCoreConstants.MESSAGETYPE292, "SENDER2", "RECEIVER2", "TRN2", "REF2", "MYR", 'N')
        );

        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // Mock static methods
        try (var mockedStaticDateUtil = mockStatic(DateUtil.class)) {
            mockedStaticDateUtil.when(() -> DateUtil.findDtEqualsCurrenctDt(any())).thenReturn(false);

            // When
            msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

            // Then
            assertEquals(2, aggregations.size()); // Assuming correct aggregations
            verify(msgHandler, times(2)).lockDBAndAggregate(any(), any(), any(), any(), any(), any(), any(), any());
        }
    }
}


org.mockito.MockedStatic<DateUtil>
