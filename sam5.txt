package com.maybank.ilm.core.dao;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Collections;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.dto.paymentmessagedetails.MatchingTxnDTO;
import com.maybank.ilm.entity.paymentmessagedetails.MetaFileInfo;
import com.maybank.ilm.core.dao.transformer.MatichingTxnTransformer;

public class PaymentMessageDaoImplTest {

    @InjectMocks
    private PaymentMessageDaoImpl paymentMessageDao;

    @Mock
    private EntityManager em;

    @Mock
    private Query query;

    @Mock
    private MatichingTxnTransformer matchingTxnTransformer;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetMatchingTransaction() {
        // Arrange
        String entityBIC = "TESTBIC";
        LocalDate fromDate = LocalDate.now();
        String queryString = QueryConstants.FINDMATCHINGTXN;

        MatchingTxnDTO matchingTxnDTO = new MatchingTxnDTO(); // Create a sample DTO
        List<MatchingTxnDTO> expectedList = Collections.singletonList(matchingTxnDTO);

        when(em.createNativeQuery(queryString)).thenReturn(query);
        when(query.unwrap(org.hibernate.query.Query.class)).thenReturn(query);
        when(query.setResultTransformer(any())).thenReturn(query);
        when(query.setParameter("fromDate", fromDate)).thenReturn(query);
        when(query.setParameter("entityBIC", entityBIC)).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedList);

        // Act
        List<MatchingTxnDTO> result = paymentMessageDao.getMatchingTransaction(entityBIC, fromDate);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertSame(matchingTxnDTO, result.get(0));

        // Verify interactions
        verify(em).createNativeQuery(queryString);
        verify(query).unwrap(org.hibernate.query.Query.class);
        verify(query).setResultTransformer(any());
        verify(query).setParameter("fromDate", fromDate);
        verify(query).setParameter("entityBIC", entityBIC);
        verify(query).getResultList();
    }
}
