package com.maybank.ilm.core.dao;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.dto.ClosingBalanceDto;

public class ClosingBalanceDaoImplTest {

    @InjectMocks
    private ClosingBalanceDaoImpl closingBalanceDao;

    @Mock
    private EntityManager entityManager;

    @Mock
    private Query query;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetClosingBalanceforInvestmentIslamic_withResults() {
        // Arrange
        Long eamMainSkey = 1L;
        LocalDate fromDate = LocalDate.of(2024, 10, 1);
        LocalDate toDate = LocalDate.of(2024, 10, 31);

        List<Object[]> mockResults = new ArrayList<>();
        mockResults.add(new Object[]{ "2024-10-01", new BigDecimal("1000.00") });
        mockResults.add(new Object[]{ "2024-10-02", new BigDecimal("1500.00") });

        when(entityManager.createNativeQuery(anyString())).thenReturn(query);
        when(query.getResultList()).thenReturn(mockResults);

        // Act
        ClosingBalanceDto result = closingBalanceDao.getClosingBalanceforInvestmentIslamic(eamMainSkey, fromDate, toDate);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getDatedAmounts());
        assertEquals(2, result.getDatedAmounts().size());
        assertEquals(new BigDecimal("1000.00"), result.getDatedAmounts().get("2024-10-01").get(0));
        assertEquals(new BigDecimal("1500.00"), result.getDatedAmounts().get("2024-10-02").get(0));
    }

    @Test
    public void testGetClosingBalanceforInvestmentIslamic_noResults() {
        // Arrange
        Long eamMainSkey = 1L;
        LocalDate fromDate = LocalDate.of(2024, 10, 1);
        LocalDate toDate = LocalDate.of(2024, 10, 31);

        when(entityManager.createNativeQuery(anyString())).thenReturn(query);
        when(query.getResultList()).thenReturn(Collections.emptyList());

        // Act
        ClosingBalanceDto result = closingBalanceDao.getClosingBalanceforInvestmentIslamic(eamMainSkey, fromDate, toDate);

        // Assert
        assertNotNull(result);
        assertNotNull(result.getDatedAmounts());
        assertTrue(result.getDatedAmounts().isEmpty());
    }
}
