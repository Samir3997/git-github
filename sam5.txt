import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.dao.SRRAccountMgmtDao;
import com.maybank.ilm.core.dao.SRRAccountMgmtDmpl;
import com.maybank.ilm.dto.RequestAnalyticsDTO;
import com.maybank.ilm.entity.SRRConfiguration;

public class SRRAccountMgmtDmplTest {

    @Mock
    private EntityManager em;

    @Mock
    private CriteriaBuilder criteriaBuilder;

    @Mock
    private CriteriaQuery<SRRConfiguration> criteriaQuery;

    @Mock
    private Root<SRRConfiguration> root;

    private SRRAccountMgmtDao srrAccountMgmtDao;
    private RequestAnalyticsDTO analyticsDTO;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        srrAccountMgmtDao = new SRRAccountMgmtDmpl();
        ((SRRAccountMgmtDmpl) srrAccountMgmtDao).em = em; // Inject mocked EntityManager
        analyticsDTO = new RequestAnalyticsDTO(); // Create sample RequestAnalyticsDTO
        analyticsDTO.setCountrySkeys(new ArrayList<>()); // Set sample data (can be customized)
        analyticsDTO.setEntitySkeys(new ArrayList<>());
        analyticsDTO.setCurrencySkeys(new ArrayList<>());
        analyticsDTO.setDefinationType("TEST_DEF"); // Set sample definition type
    }

    @Test
    public void testSrrConfigByType_WithResults() {
        List<SRRConfiguration> expectedResults = new ArrayList<>();
        expectedResults.add(new SRRConfiguration()); // Create sample SRRConfiguration

        // Mock CriteriaBuilder behavior
        when(em.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(SRRConfiguration.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(SRRConfiguration.class)).thenReturn(root);

        // Mock predicate building
        List<Predicate> predicates = new ArrayList<>();
        when(criteriaQuery.where(predicates.toArray(new Predicate[0]))).thenReturn(criteriaQuery);

        // Mock execution and return expected results
        when(em.createQuery(criteriaQuery)).thenReturn(criteriaQuery);
        when(criteriaQuery.getResultList()).thenReturn(expectedResults);

        List<SRRConfiguration> actualResults = srrAccountMgmtDao.getSrrConfigByType(analyticsDTO);

        assertEquals(expectedResults, actualResults);
    }

    @Test
    public void testSrrConfigByType_NoResults() {
        // Mock CriteriaBuilder behavior (similar to testSrrConfigByType_WithResults)
        when(em.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(SRRConfiguration.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(SRRConfiguration.class)).thenReturn(root);

        // Mock predicate building (similar to testSrrConfigByType_WithResults)

        // Mock execution and return empty list
        when(em.createQuery(criteriaQuery)).thenReturn(criteriaQuery);
        when(criteriaQuery.getResultList()).thenReturn(new ArrayList<>());

        List<SRRConfiguration> actualResults = srrAccountMgmtDao.getSrrConfigByType(analyticsDTO);

        assertEquals(new ArrayList<>(), actualResults);
    }

    @Test
    public void testSrrConfigByType_NullDefinitionType() {
        analyticsDTO.setDefinationType(null); // Set definition type to null

        List<SRRConfiguration> actualResults = srrAccountMgmtDao.getSrrConfigByType(analyticsDTO);

        assertNull(actualResults);
    }
}
