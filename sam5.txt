package com.maybank.ilm.junit.nostro.nostroapihandlers;

import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Matchers;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.maybank.ilm.core.dao.ConfigRepo;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.nostro.nostroapihandlers.BnyApiRespHandler;
import com.maybank.ilm.dto.Nostro.NostroApiCommon;
import com.maybank.ilm.dto.Nostro.NostroRequestDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyAccount;
import com.maybank.ilm.dto.Nostro.bnydto.BnyApiResponseDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyBalanceInner;
import com.maybank.ilm.dto.Nostro.bnydto.BnyBalanceList;
import com.maybank.ilm.dto.Nostro.bnydto.BnyEntryList;
import com.maybank.ilm.dto.Nostro.bnydto.BnyMetadata;
import com.maybank.ilm.dto.Nostro.bnydto.BnyStatementDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyTransactionData;
import com.maybank.ilm.entity.Config;
import com.maybank.ilm.junit.config.AbstractServiceTest;

public class BnyApiRespHandlerTest extends AbstractServiceTest{
	@InjectMocks
	private BnyApiRespHandler bnyApiRespHandler;
	@Mock
    private RestTemplate restTemplate;
    @Mock
    private ConfigRepo configRepo;
    @Mock
    private EntityAccountMappingRepo accountMappingRepo;
    @Mock
    private ObjectMapper objectMapper;

    private NostroRequestDTO apiDTO;
	@Before
    public void setUp() {
         MockitoAnnotations.initMocks(this);
         doSetup(bnyApiRespHandler);
	}
	
	 @Test
	    public void testNostroApiServiceSuccess(){
		 apiDTO = new NostroRequestDTO();
         apiDTO.setFromDate(LocalDate.now().minusDays(1));
         apiDTO.setToDate(LocalDate.now());
         apiDTO.setReportType("PP");
		when(configRepo.getConfigByShortCode(Matchers.anyString(), Matchers.anyString()))
				.thenReturn(mockConfigResponse());
		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization", "Bearer testToken");

		ResponseEntity<String> mockTokenResponse = mock(ResponseEntity.class);
		when(restTemplate.exchange(Matchers.anyString(), Matchers.any(HttpMethod.class), Matchers.any(HttpEntity.class),
				Matchers.any(Class.class))).thenReturn(mockTokenResponse);
	     when(mockTokenResponse.getBody()).thenReturn("{\"access_token\": \"testToken\"}");
		//ResponseEntity<String> mockApiResponse = mock(ResponseEntity.class);
		//when(restTemplate.exchange(Matchers.anyString(),  Matchers.any(HttpMethod.class), Matchers.any(HttpEntity.class),Matchers.any(Class.class)))
		//		.thenReturn(mockApiResponse);
		//BnyApiResponseDTO bnyApiResponseDTO = createMockBnyApiResponseDTO();
		//when(objectMapper.readValue(Matchers.anyString(), Matchers.any(TypeReference.class))).thenReturn(bnyApiResponseDTO);
		List<NostroApiCommon> result = bnyApiRespHandler.nostroApiService(apiDTO);
	 }
	 
	 @Test
	    public void test1NostroApiServiceSuccess() throws JsonMappingException, JsonProcessingException{
		apiDTO = new NostroRequestDTO();
		apiDTO.setFromDate(LocalDate.now().minusDays(1));
		apiDTO.setToDate(LocalDate.now());
		apiDTO.setReportType("ID");
		when(configRepo.getConfigByShortCode(Matchers.anyString(), Matchers.anyString()))
				.thenReturn(mockConfigResponse());
		HttpHeaders headers = new HttpHeaders();
		headers.set("Authorization", "Bearer testToken");
		BnyApiResponseDTO bnyApiResponseDTO = new BnyApiResponseDTO();
		BnyMetadata bnyMetadata = new BnyMetadata();
		bnyMetadata.setSuccess(true);
		BnyTransactionData bnyTransactionData = new BnyTransactionData();
		List<BnyStatementDTO> statement = new ArrayList<>();
		BnyStatementDTO bnyStatementDTO = new BnyStatementDTO();
		BnyAccount bnyAccount = new BnyAccount();
		bnyAccount.setCurrency("USD");
		List<BnyEntryList> entryList = new ArrayList<>();
		BnyEntryList bnyEntryList = new BnyEntryList();
		bnyEntryList.setAmount(new BigDecimal(300));
		bnyEntryList.setCreditDebitIndicator("CRDT");
		bnyEntryList.setAdditionalEntryInformation("XYZ");
		entryList.add(bnyEntryList);
		List<BnyBalanceList> balance = new ArrayList<>();
		BnyBalanceList bnyBalanceList = new BnyBalanceList();
		BnyBalanceInner bnyBalanceInner = new BnyBalanceInner();
		Map<String, String> innerType = new HashMap<>();
		innerType.put("code", "CLBD");
		bnyBalanceInner.setCodeOrProprietary(innerType);
		Map<String, String> innerDate = new HashMap<>();
		innerDate.put("dateTime", "2023-01-01");
		bnyBalanceList.setAmount(new BigDecimal(400));
		bnyBalanceList.setDate(innerDate);
		bnyBalanceList.setType(bnyBalanceInner);
		balance.add(bnyBalanceList);
		bnyStatementDTO.setAccount(bnyAccount);
		bnyStatementDTO.setEntry(entryList);
		bnyStatementDTO.setBalance(balance);
		statement.add(bnyStatementDTO);
		bnyTransactionData.setStatement(statement);
		bnyApiResponseDTO.setMetadata(bnyMetadata);
		bnyApiResponseDTO.setData(bnyTransactionData);

		ResponseEntity<String> mockTokenResponse = mock(ResponseEntity.class);
		when(restTemplate.exchange(Matchers.anyString(), Matchers.any(HttpMethod.class), Matchers.any(HttpEntity.class),
				Matchers.any(Class.class))).thenReturn(mockTokenResponse);
		when(mockTokenResponse.getBody()).thenReturn("{\"access_token\": \"testToken\"}");
		String mockResponseBody = "{ \"metadata\": { \"success\": true }, \"data\": { } }";
		ResponseEntity<String> mockResponseEntity = ResponseEntity.ok(mockResponseBody);
		when(restTemplate.exchange(Matchers.anyString(), Matchers.any(HttpMethod.class), Matchers.any(HttpEntity.class),
				Matchers.any(Class.class))).thenReturn(mockResponseEntity);
		 when(objectMapper.readValue(Matchers.anyString(),Matchers.any(TypeReference.class))).thenReturn(bnyApiResponseDTO);
		  List<NostroApiCommon> result = bnyApiRespHandler.nostroApiService(apiDTO);
	 }
	  private List<Config> mockConfigResponse() {
	        Config config1 = new Config();
	        config1.setConfigId(1L);
	        config1.setConfigType("BNY_API");
	        config1.setShortCode("BNY_RETRIEVE_HISTORICAL_ACCOUNT_BALANCE");
	        config1.setValue("http://mock-api-url/retrieveHistorical");

	        Config config2 = new Config();
	        config2.setConfigId(2L);
	        config2.setConfigType("BNY_API");
	        config2.setShortCode("BNY_AUTH_TOKEN");
	        config2.setValue("http://mock-api-url/authToken");

	        List<Config> configList = new ArrayList<>();
	        configList.add(config1);
	        configList.add(config2);

	        return configList;
	    }
}
