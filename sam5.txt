package com.maybank.ilm.core.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import com.maybank.ilm.dto.ClosingBalanceDto;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class ClosingBalanceDaoImplTest {

    @InjectMocks
    private ClosingBalanceDaoImpl closingBalanceDao;

    @Mock
    private EntityManager entityManager;

    @Mock
    private Query query;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetClosingBalance() {
        // Prepare mock data
        Long eamMainSkey = 1L;
        Long eamSRRSkey = 2L;
        LocalDate fromDate = LocalDate.of(2024, 10, 1);
        LocalDate toDate = LocalDate.of(2024, 10, 2);
        
        List<Object[]> mockRows = new ArrayList<>();
        mockRows.add(new Object[]{ LocalDate.now(), BigDecimal.valueOf(1000), BigDecimal.valueOf(2000) });
        mockRows.add(new Object[]{ LocalDate.now().plusDays(1), BigDecimal.valueOf(1500), BigDecimal.valueOf(2500) });

        // Mock the behavior of the EntityManager and Query
        when(entityManager.createNativeQuery(anyString())).thenReturn(query);
        when(query.setParameter(anyString(), any())).thenReturn(query);
        when(query.getResultList()).thenReturn(mockRows);

        // Call the method under test
        ClosingBalanceDto result = closingBalanceDao.getClosingBalance(eamMainSkey, eamSRRSkey, fromDate, toDate);

        // Validate the results
        LinkedHashMap<String, ArrayList<BigDecimal>> expectedDatedAmounts = new LinkedHashMap<>();
        expectedDatedAmounts.put(LocalDate.now().toString(), new ArrayList<>(List.of(BigDecimal.valueOf(1000), BigDecimal.valueOf(2000))));
        expectedDatedAmounts.put(LocalDate.now().plusDays(1).toString(), new ArrayList<>(List.of(BigDecimal.valueOf(1500), BigDecimal.valueOf(2500))));

        assertEquals(expectedDatedAmounts, result.getDatedAmounts());
    }
}
