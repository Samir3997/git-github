import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;

public class LockConfigDaoImplTest {

    @Mock
    private EntityManager em;

    private LockConfigDao lockConfigDao;

    @Before
    public void setUp() {
        lockConfigDao = new LockConfigDaoImpl();
        lockConfigDao.em = em;
    }

    @Test
    public void testUpdateLockConfigSuccess() {
        String lockName = "testLock";
        Long trackerId = 123L;

        // Mock query behavior
        Query mockQuery = mock(Query.class);
        when(em.createNativeQuery("UPDATE LOCK_CONFIG set N_LOCK_NUMBER = :trackerId where N_LOCK_NUMBER = 0 and V_LOCK_NAME = :lockName"))
                .thenReturn(mockQuery);
        when(mockQuery.executeUpdate()).thenReturn(1);

        int count = lockConfigDao.updateLockConfig(lockName, trackerId);

        assertEquals(1, count);
    }

    @Test
    public void testUpdateLockConfigNoUpdate() {
        String lockName = "testLock";
        Long trackerId = 123L;

        // Mock query behavior
        Query mockQuery = mock(Query.class);
        when(em.createNativeQuery("UPDATE LOCK_CONFIG set N_LOCK_NUMBER = :trackerId where N_LOCK_NUMBER = 0 and V_LOCK_NAME = :lockName"))
                .thenReturn(mockQuery);
        when(mockQuery.executeUpdate()).thenReturn(0);

        int count = lockConfigDao.updateLockConfig(lockName, trackerId);

        assertEquals(0, count);
    }

    @Test
    public void testReleaseLockConfigSuccess() {
        String lockName = "testLock";

        // Mock query behavior
        Query mockQuery = mock(Query.class);
        when(em.createNativeQuery("UPDATE LOCK_CONFIG set N_LOCK_NUMBER = 0 where V_LOCK_NAME = :lockName"))
                .thenReturn(mockQuery);
        when(mockQuery.executeUpdate()).thenReturn(1);

        int count = lockConfigDao.releaseLockConfig(lockName);

        assertEquals(1, count);
    }

    @Test
    public void testReleaseLockConfigNoUpdate() {
        String lockName = "testLock";

        // Mock query behavior
        Query mockQuery = mock(Query.class);
        when(em.createNativeQuery("UPDATE LOCK_CONFIG set N_LOCK_NUMBER = 0 where V_LOCK_NAME = :lockName"))
                .thenReturn(mockQuery);
        when(mockQuery.executeUpdate()).thenReturn(0);

        int count = lockConfigDao.releaseLockConfig(lockName);

        assertEquals(0, count);
    }

    @Test
    public void testFetchTrackerIdSuccess() {
        String lockName = "testLock";
        Long expectedTrackerId = 123L;

        // Mock query behavior
        Query mockQuery = mock(Query.class);
        when(em.createQuery("select LockConfig.lockNumber from  LockConfig where LockConfig.lockName = :lockName"))
                .thenReturn(mockQuery);
        when(mockQuery.getSingleResult()).thenReturn(expectedTrackerId);

        Long trackerId = lockConfigDao.fetchTrackerId(lockName);

        assertEquals(expectedTrackerId, trackerId);
    }

    @Test(expected = NoResultException.class)
    public void testFetchTrackerIdNoResult() {
        String lockName = "testLock";

        // Mock query behavior
        Query mockQuery = mock(Query.class);
        when(em.createQuery("select LockConfig.lockNumber from  LockConfig where LockConfig.lockName = :lockName"))
                .thenReturn(mockQuery);
        when(mockQuery.getSingleResult()).thenThrow(new NoResultException());

        lockConfigDao.fetchTrackerId(lockName);
    }
}
