package com.maybank.ilm.core.dao;

import com.maybank.ilm.dto.BlotterParamsDTO;
import com.maybank.ilm.entity.AccountBalanceManagement;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class BlotterDaoImplTest {

    private BlotterDaoImpl blotterDaoImpl;
    private EntityManager entityManager;

    @BeforeEach
    void setUp() {
        entityManager = mock(EntityManager.class);
        blotterDaoImpl = new BlotterDaoImpl();
        blotterDaoImpl.em = entityManager;
    }

    @Test
    void testGetDrillDownDetails() {
        // Prepare the input data
        BlotterParamsDTO paramsDto = new BlotterParamsDTO();
        paramsDto.setValueDt(LocalDate.now());
        paramsDto.setAcctName("NOSTROACCOUNT");
        paramsDto.setDrillDownInd("RUNNING_BALANCE");
        paramsDto.setScaleValMap(new HashMap<>());

        List<Long> eamSkeys = new ArrayList<>();
        eamSkeys.add(1L);
        eamSkeys.add(2L);

        // Mocking the criteria builder and query
        CriteriaBuilder criteriaBuilder = mock(CriteriaBuilder.class);
        CriteriaQuery<AccountBalanceManagement> criteriaQuery = mock(CriteriaQuery.class);
        Root<AccountBalanceManagement> root = mock(Root.class);

        when(entityManager.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(AccountBalanceManagement.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(AccountBalanceManagement.class)).thenReturn(root);

        // Mocking the result list
        List<AccountBalanceManagement> mockResultList = new ArrayList<>();
        mockResultList.add(new AccountBalanceManagement()); // Add a mock object or a real one

        when(entityManager.createQuery(any(CriteriaQuery.class))).thenReturn(mock(javax.persistence.TypedQuery.class));
        when(entityManager.createQuery(any(CriteriaQuery.class)).getResultList()).thenReturn(mockResultList);

        // Call the method under test
        List<AccountBalanceManagement> result = blotterDaoImpl.getDrillDownDetails(paramsDto, eamSkeys);

        // Validate the result
        assertNotNull(result);
        assertEquals(1, result.size()); // Check if the expected number of results is returned

        // Verify interactions
        verify(entityManager).getCriteriaBuilder();
        verify(criteriaBuilder).createQuery(AccountBalanceManagement.class);
        verify(criteriaQuery).from(AccountBalanceManagement.class);
        verify(criteriaQuery).select(root);
        verify(entityManager).createQuery(criteriaQuery);
    }
}
