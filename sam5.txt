package com.maybank.ilm.core.nostro.nostroapihandlers;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.json.JSONObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.maybank.ilm.core.dao.ConfigRepo;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.dto.Nostro.NostroApiCommon;
import com.maybank.ilm.dto.Nostro.NostroBalanceDTO;
import com.maybank.ilm.dto.Nostro.NostroRequestDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyApiResponseDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyStatementDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyTransactionData;

public class BnyApiRespHandlerTest {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ConfigRepo configRepo;

    @Mock
    private EntityAccountMappingRepo accountMappingRepo;

    @InjectMocks
    private BnyApiRespHandler bnyApiRespHandler;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testNostroApiServiceSuccess() throws Exception {
        // Arrange
        NostroRequestDTO requestDTO = new NostroRequestDTO();
        requestDTO.setReportType("PP"); // Past Period Report
        requestDTO.setFromDate(java.sql.Date.valueOf("2023-01-01"));
        requestDTO.setToDate(java.sql.Date.valueOf("2023-01-31"));

        // Mocking ConfigRepo return values
        when(configRepo.getConfigByShortCode(anyString(), anyString()))
                .thenReturn(Arrays.asList(mockConfigValue("https://example.com/historical"), mockConfigValue("authToken")));

        // Mocking RestTemplate Auth Token Response
        String tokenResponseBody = new JSONObject().put("access_token", "test_token").toString();
        ResponseEntity<String> authTokenResponse = mock(ResponseEntity.class);
        when(authTokenResponse.getBody()).thenReturn(tokenResponseBody);
        when(restTemplate.exchange(eq("authToken"), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenReturn(authTokenResponse);

        // Mocking BNY Historical Data API response
        BnyApiResponseDTO mockApiResponse = mockBnyApiResponseDTO(true);
        ResponseEntity<String> historicalResponse = mock(ResponseEntity.class);
        when(historicalResponse.getBody()).thenReturn(new ObjectMapper().writeValueAsString(mockApiResponse));
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(historicalResponse);

        // Act
        List<NostroApiCommon> result = bnyApiRespHandler.nostroApiService(requestDTO);

        // Assert
        assertNotNull(result);
        assertFalse(result.isEmpty());
        assertEquals(1, result.size());
        assertEquals(2, result.get(0).getNostroTransactionDTO().size());
        assertEquals(1, result.get(0).getNostroBalanceDTO().size());

        // Verify interactions
        verify(configRepo, times(2)).getConfigByShortCode(anyString(), anyString());
        verify(restTemplate, times(2)).exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), eq(String.class));
    }

    @Test
    public void testNostroApiServiceFailure() throws Exception {
        // Arrange
        NostroRequestDTO requestDTO = new NostroRequestDTO();
        requestDTO.setReportType("PP"); // Past Period Report
        requestDTO.setFromDate(java.sql.Date.valueOf("2023-01-01"));
        requestDTO.setToDate(java.sql.Date.valueOf("2023-01-31"));

        // Mocking ConfigRepo return values
        when(configRepo.getConfigByShortCode(anyString(), anyString()))
                .thenReturn(Arrays.asList(mockConfigValue("https://example.com/historical"), mockConfigValue("authToken")));

        // Mocking RestTemplate Auth Token Response
        String tokenResponseBody = new JSONObject().put("access_token", "test_token").toString();
        ResponseEntity<String> authTokenResponse = mock(ResponseEntity.class);
        when(authTokenResponse.getBody()).thenReturn(tokenResponseBody);
        when(restTemplate.exchange(eq("authToken"), eq(HttpMethod.POST), any(HttpEntity.class), eq(String.class)))
                .thenReturn(authTokenResponse);

        // Mocking BNY API failure response
        BnyApiResponseDTO mockApiResponse = mockBnyApiResponseDTO(false);
        ResponseEntity<String> historicalResponse = mock(ResponseEntity.class);
        when(historicalResponse.getBody()).thenReturn(new ObjectMapper().writeValueAsString(mockApiResponse));
        when(restTemplate.exchange(anyString(), eq(HttpMethod.GET), any(HttpEntity.class), eq(String.class)))
                .thenReturn(historicalResponse);

        // Act
        List<NostroApiCommon> result = bnyApiRespHandler.nostroApiService(requestDTO);

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty()); // As no successful data

        // Verify interactions
        verify(configRepo, times(2)).getConfigByShortCode(anyString(), anyString());
        verify(restTemplate, times(2)).exchange(anyString(), any(HttpMethod.class), any(HttpEntity.class), eq(String.class));
    }

    // Helper methods for mocking

    private Config mockConfigValue(String value) {
        Config config = mock(Config.class);
        when(config.getValue()).thenReturn(value);
        return config;
    }

    private BnyApiResponseDTO mockBnyApiResponseDTO(boolean success) {
        BnyApiResponseDTO response = new BnyApiResponseDTO();
        response.getMetadata().setSuccess(success);
        
        if (success) {
            BnyTransactionData data = new BnyTransactionData();
            BnyStatementDTO statementDTO = new BnyStatementDTO();
            statementDTO.setBalance(Arrays.asList());
            statementDTO.setEntry(Arrays.asList());
            statementDTO.setAccount(new BnyAccount());
            data.setStatement(Arrays.asList(statementDTO));
            response.setData(data);
        }

        return response;
    }
}
