import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import com.maybank.ilm.core.swiftmsghandlers.MXMsgHandlerAbstractImpl;
import com.maybank.ilm.entity.EntityAccountMapDefinition;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.service.EntityAccountMappingService;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class MXMsgHandlerAbstractImplTest {

    @Mock
    private EntityAccountMappingRepo eamRepo;

    @Mock
    private EntityAccountMappingService entityAcctMapService;

    @InjectMocks
    private MXMsgHandlerAbstractImpl mxMsgHandler;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testCheckForIntraBankTransactions_ExistingEntity() {
        // Given
        String counterBic = "TESTBIC";
        String currencyCode = "USD";
        EntityAccountMapDefinition mockDefinition = new EntityAccountMapDefinition();
        mockDefinition.setEntityAcctMapSkey(123L);
        
        // Mock the repository response
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey(anyString(), anyString(), anyLong()))
            .thenReturn(mockDefinition);

        // When
        Long result = mxMsgHandler.checkForIntraBankTransactions(counterBic, currencyCode);

        // Then
        assertEquals(123L, result);
    }

    @Test
    public void testCheckForIntraBankTransactions_NonExistingEntity() {
        // Given
        String counterBic = "UNKNOWNBIC";
        String currencyCode = "EUR";

        // Mock the repository response
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey(anyString(), anyString(), anyLong()))
            .thenReturn(null);

        // When
        Long result = mxMsgHandler.checkForIntraBankTransactions(counterBic, currencyCode);

        // Then
        assertEquals(null, result);
    }
}
