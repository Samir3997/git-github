package com.maybank.ilm.core.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.dto.BlotterParamsDTO;
import com.maybank.ilm.entity.AccountBalanceManagement;

public class BlotterDaoImplTest {

    @InjectMocks
    private BlotterDaoImpl blotterDao;

    @Mock
    private EntityManager em;

    @Mock
    private CriteriaBuilder criteriaBuilder;

    @Mock
    private CriteriaQuery<AccountBalanceManagement> criteriaQuery;

    @Mock
    private Root<AccountBalanceManagement> root;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(em.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(AccountBalanceManagement.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(AccountBalanceManagement.class)).thenReturn(root);
        when(criteriaQuery.select(root)).thenReturn(criteriaQuery);
    }

    @Test
    public void testGetDrillDownDetailsRunningBalance() {
        testGetDrillDownDetails("RUNNING_BALANCE", BigDecimal.valueOf(1000), Collections.emptyList());
    }

    @Test
    public void testGetDrillDownDetailsProjectedBalance() {
        testGetDrillDownDetails("PROJECTED_BALANCE", null, Collections.emptyList());
    }

    @Test
    public void testGetDrillDownDetailsWithTransactionType() {
        Map<String, Object> scaleValMap = new HashMap<>();
        scaleValMap.put("TrxnType", BigDecimal.ONE); // Plus transaction
        testGetDrillDownDetails("OTHER_INDICATOR", null, Collections.singletonList(scaleValMap));
    }

    private void testGetDrillDownDetails(String drillDownInd, BigDecimal minAmount, List<Map<String, Object>> additionalConditions) {
        // Arrange
        LocalDate valueDate = LocalDate.now();
        BlotterParamsDTO paramsDto = new BlotterParamsDTO();
        paramsDto.setValueDt(valueDate);
        paramsDto.setAcctName("NOSTROACCOUNT");
        paramsDto.setDrillDownInd(drillDownInd);
        
        if (minAmount != null) {
            paramsDto.setScaleValMap(Collections.singletonMap("MinAmount", minAmount));
        } else {
            paramsDto.setScaleValMap(Collections.emptyMap());
        }

        List<Long> eamSkeys = Arrays.asList(1L, 2L, 3L);

        // Mocking predicates
        Predicate predicate1 = mock(Predicate.class);
        Predicate predicate2 = mock(Predicate.class);
        Predicate predicate3 = mock(Predicate.class);
        when(criteriaBuilder.equal(root.get("valueDate"), valueDate)).thenReturn(predicate1);
        when(criteriaBuilder.notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE940)).thenReturn(predicate2);
        when(criteriaBuilder.notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE950)).thenReturn(predicate3);
        
        // Mock behavior based on `drillDownInd`
        if ("RUNNING_BALANCE".equals(drillDownInd)) {
            when(criteriaBuilder.notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE103)).thenReturn(mock(Predicate.class));
            // Add other mocks for RUNNING_BALANCE specific logic
        } else if ("PROJECTED_BALANCE".equals(drillDownInd)) {
            when(criteriaBuilder.notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE900)).thenReturn(mock(Predicate.class));
            // Add other mocks for PROJECTED_BALANCE specific logic
        } else {
            // Handle other indicators as needed
        }

        // Handle additional conditions
        if (minAmount != null) {
            when(criteriaBuilder.greaterThanOrEqualTo(any(), any())).thenReturn(mock(Predicate.class));
        }

        // Mock the query execution and result
        List<AccountBalanceManagement> mockResults = Arrays.asList(new AccountBalanceManagement(), new AccountBalanceManagement());
        when(em.createQuery(criteriaQuery)).thenReturn(mock(javax.persistence.TypedQuery.class));
        when(em.createQuery(criteriaQuery).getResultList()).thenReturn(mockResults);

        // Act
        List<AccountBalanceManagement> result = blotterDao.getDrillDownDetails(paramsDto, eamSkeys);

        // Assert
        assertEquals(mockResults.size(), result.size());

        // Verify interactions
        verify(criteriaBuilder).equal(root.get("valueDate"), valueDate);
        verify(criteriaBuilder).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE940);
        verify(criteriaBuilder).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE950);
        
        if ("RUNNING_BALANCE".equals(drillDownInd)) {
            verify(criteriaBuilder).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE103);
            // Verify other conditions for RUNNING_BALANCE
        } else if ("PROJECTED_BALANCE".equals(drillDownInd)) {
            verify(criteriaBuilder).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE900);
            // Verify other conditions for PROJECTED_BALANCE
        }
        
        // Verify that the right query is executed
        verify(em.createQuery(criteriaQuery)).getResultList();
    }
}
