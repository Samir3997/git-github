package com.maybank.ilm.core.dao;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

public class DimDaoImplTest {

    @InjectMocks
    private DimDaoImpl dimDaoImpl;

    @Mock
    private EntityManager em;

    @Mock
    private CriteriaBuilder criteriaBuilder;

    @Mock
    private CriteriaQuery<DimDTO> criteriaQuery;

    @Mock
    private Root<DimDTO> root;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(em.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(DimDTO.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(DimDTO.class)).thenReturn(root);
        when(em.createQuery(criteriaQuery)).thenReturn(mock(javax.persistence.TypedQuery.class));
    }

    @Test
    public void testGetDimension() {
        // Arrange
        DimDTO dimDTO = new DimDTO(); // Create a mock DimDTO object
        List<DimDTO> expectedList = new ArrayList<>();
        expectedList.add(dimDTO);

        javax.persistence.TypedQuery<DimDTO> typedQuery = mock(javax.persistence.TypedQuery.class);
        when(typedQuery.getResultList()).thenReturn(expectedList);
        when(em.createQuery(criteriaQuery)).thenReturn(typedQuery);

        // Act
        List<DimDTO> result = dimDaoImpl.getDimension(DimDTO.class);

        // Assert
        verify(em).getCriteriaBuilder();
        verify(criteriaBuilder).createQuery(DimDTO.class);
        verify(criteriaQuery).from(DimDTO.class);
        verify(typedQuery).getResultList();
        assert(result.size() == 1);
        assert(result.get(0).equals(dimDTO));
    }
}
