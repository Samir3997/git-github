package com.maybank.ilm.core.dao;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class PaymentMessageDaoImplTest {

    @InjectMocks
    private PaymentMessageDaoImpl paymentMessageDao;

    @Mock
    private EntityManager em;

    @Mock
    private Query query;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetMatchingTrxnsMembers() {
        // Arrange
        BigDecimal ratio = BigDecimal.valueOf(0.5);
        String entityBIC = "TESTBIC";
        LocalDate fromDate = LocalDate.now();

        List<String> expectedList = Arrays.asList("Member1", "Member2");

        // Mock the behavior of EntityManager and Query
        when(em.createNativeQuery(QueryConstants.GETMATCHINGTRXNS)).thenReturn(query);
        when(query.setParameter("ratio", ratio)).thenReturn(query);
        when(query.setParameter("entityBIC", entityBIC)).thenReturn(query);
        when(query.setParameter("fromDate", fromDate)).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedList);

        // Act
        List<String> result = paymentMessageDao.getMatchingTrxnsMembers(ratio, entityBIC, fromDate);

        // Assert
        assertNotNull(result, "The result should not be null");
        assertEquals(2, result.size(), "The size of the result should match the expected size");
        assertEquals("Member1", result.get(0), "The first member should match 'Member1'");
        assertEquals("Member2", result.get(1), "The second member should match 'Member2'");

        // Verify interactions
        verify(em).createNativeQuery(QueryConstants.GETMATCHINGTRXNS);
        verify(query).setParameter("ratio", ratio);
        verify(query).setParameter("entityBIC", entityBIC);
        verify(query).setParameter("fromDate", fromDate);
        verify(query).getResultList();
    }
}
