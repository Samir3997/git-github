import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class PaymentPosAnalyticsDaoImplTest {

    @Mock
    private EntityManager entityManager;

    @Mock
    private Query query;

    @InjectMocks
    private PaymentPosAnalyticsDaoImpl paymentPosAnalyticsDaoImpl;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSingleDayPayments() {
        // Arrange
        Integer nHighest = 5;
        LocalDateTime toDate = LocalDateTime.now();
        LocalDateTime fromDate = toDate.minusDays(1);
        List<Long> entityMapSkey = Arrays.asList(1L, 2L);
        String amtSign = "positive";
        List<LocalDate> holidaysList = Collections.singletonList(LocalDateTime.now().toLocalDate());

        List<AccountBalanceManagement> expectedResults = new ArrayList<>();
        // Mock the EntityManager and Query behavior
        when(entityManager.createNativeQuery(anyString(), eq(AccountBalanceManagement.class)))
            .thenReturn(query);
        when(query.setParameter(anyString(), any())).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedResults);

        // Act
        List<AccountBalanceManagement> result = paymentPosAnalyticsDaoImpl.singleDayPayments(
            nHighest, toDate, fromDate, entityMapSkey, amtSign, holidaysList);

        // Assert
        assertEquals(expectedResults, result);
        verify(entityManager).createNativeQuery(anyString(), eq(AccountBalanceManagement.class));
        verify(query).setParameter("toDate", toDate);
        verify(query).setParameter("fromDate", fromDate);
        verify(query).setParameter("entityAcctMapSkey", entityMapSkey);
        verify(query).setParameter("amtSign", amtSign);
        verify(query).setParameter("holidays", holidaysList);
        verify(query, times(1)).getResultList();
    }
}
