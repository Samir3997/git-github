@RunWith(MockitoJUnitRunner.class)
public class PaymentPosAnalyticsDaoImplTest {

    @Mock
    private EntityManager em;

    @InjectMocks
    private PaymentPosAnalyticsDaoImpl paymentPosAnalyticsDaoImpl;

    @Test
    public void testSingleDayPayments() {
        // Mock query creation
        LocalDateTime toDate = LocalDateTime.now();
        LocalDateTime fromDate = LocalDateTime.now().minusDays(1);
        List<Long> entityMapSkey = Arrays.asList(1L, 2L);
        String amtSign = "D";
        List<LocalDate> holidaysList = Collections.emptyList();
        List<String> messageTypes = new ArrayList<>(Arrays.asList("535", "940", "950"));
        Integer nHighest = 5;

        Query mockQuery = Mockito.mock(Query.class);
        Mockito.when(em.createNativeQuery(anyString(), any(Class.class))).thenReturn(mockQuery);

        // Mock query execution
        List<AccountBalanceManagement> resultList = new ArrayList<>();
        Mockito.when(mockQuery.setParameter(anyString(), any())).thenReturn(mockQuery);
        Mockito.when(mockQuery.setFirstResult(anyInt())).thenReturn(mockQuery);
        Mockito.when(mockQuery.setMaxResults(anyInt())).thenReturn(mockQuery);
        Mockito.when(mockQuery.getResultList()).thenReturn(resultList);

        // Call the method under test
        List<AccountBalanceManagement> actualResult = paymentPosAnalyticsDaoImpl.singleDayPayments(nHighest, toDate, fromDate, entityMapSkey, amtSign, holidaysList);

        // Assert the results
        assertEquals(resultList, actualResult);

        // Verify the query parameters
        Mockito.verify(mockQuery).setParameter("toDate", toDate);
        Mockito.verify(mockQuery).setParameter("fromDate", fromDate);
        Mockito.verify(mockQuery).setParameter("entityAcctMapSkey", entityMapSkey);
        Mockito.verify(mockQuery).setParameter("amtSign", amtSign);
        Mockito.verify(mockQuery).setParameter("holidays", holidaysList);
        Mockito.verify(mockQuery).setParameter("msgTypes", messageTypes);
        Mockito.verify(mockQuery).setFirstResult(0);
        Mockito.verify(mockQuery).setMaxResults(nHighest);
    }
}
