package com.maybank.cac.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;

import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api") // Match the naming convention used in frontend
public class FlaskIntegrationController {

    private final WebClient webClient;

    public FlaskIntegrationController() {
        // Configure WebClient to call Flask endpoints
        this.webClient = WebClient.builder()
                .baseUrl("http://10.170.116.116:5000") // Flask server base URL
                .build();
    }

    // Endpoint to handle requests from React frontend
    @PostMapping("/process-request")
    public Mono<Map<String, Object>> processAndForward(@RequestBody Map<String, Object> uiRequest) {
        // Step 1: Process the received request from React
        Map<String, Object> processedRequest = new HashMap<>(uiRequest);

        // Add any additional data if required
        processedRequest.put("additionalData", "Processed by Spring Boot");

        // Step 2: Forward the processed request to Flask
        return webClient.post()
                .uri("/receive_data") // Flask endpoint
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(processedRequest)
                .retrieve()
                .bodyToMono(Map.class) // Expect a Map response from Flask
                .map(flaskResponse -> {
                    // Step 3: Modify response from Flask before sending it to React if needed
                    flaskResponse.put("additionalInfo", "Handled by Spring Boot");
                    return flaskResponse;
                });
    }
}


import React, { useState } from "react";

const App = () => {
  const [response, setResponse] = useState(null);

  const sendRequest = async () => {
    const requestBody = {
      Data: "Tot",
    };

    try {
      const res = await fetch("http://localhost:8080/api/process-request", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });
      const data = await res.json();
      setResponse(data);
    } catch (error) {
      console.error("Error:", error);
    }
  };

  return (
    <div>
      <button onClick={sendRequest}>Send Request</button>
      {response && <pre>{JSON.stringify(response, null, 2)}</pre>}
    </div>
  );
};

export default App;


