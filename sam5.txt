import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.dto.RequestAnalyticsDTO;
import com.maybank.ilm.entity.SRRConfiguration;
import org.hibernate.query.NativeQuery;

public class SRRAccountMgmtDmplTest {

    @InjectMocks
    private SRRAccountMgmtDmpl srrAccountMgmtDmpl;

    @Mock
    private EntityManager em;

    @Mock
    private Query query;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testFindSrrConfigWithDefnTypeAndDate() {
        // Mocking RequestAnalyticsDTO
        RequestAnalyticsDTO analyticsDTO = new RequestAnalyticsDTO();
        analyticsDTO.setCountrySkeys(Arrays.asList(1L, 2L));
        analyticsDTO.setEntitySkeys(Arrays.asList(3L));
        analyticsDTO.setCurrencySkeys(Arrays.asList(4L));
        analyticsDTO.setDefinationType("EL");

        LocalDate effectiveDate = LocalDate.of(2023, 9, 29);

        // Mocking SRRConfiguration entity
        SRRConfiguration config1 = new SRRConfiguration();
        config1.setCountrySkey(1L);
        config1.setEntitySkey(3L);
        config1.setCurrencySkey(4L);
        config1.setDefnType("EL");

        SRRConfiguration config2 = new SRRConfiguration();
        config2.setCountrySkey(2L);
        config2.setEntitySkey(3L);
        config2.setCurrencySkey(4L);
        config2.setDefnType("EL");

        List<SRRConfiguration> configList = Arrays.asList(config1, config2);

        // Mock the behavior of createNativeQuery
        when(em.createNativeQuery(anyString(), eq(SRRConfiguration.class))).thenReturn(query);
        when(query.unwrap(NativeQuery.class)).thenReturn(query);

        // Set query parameters
        when(query.setParameter("countrySkeys", analyticsDTO.getCountrySkeys())).thenReturn(query);
        when(query.setParameter("entitySkeys", analyticsDTO.getEntitySkeys())).thenReturn(query);
        when(query.setParameter("currencySkeys", analyticsDTO.getCurrencySkeys())).thenReturn(query);
        when(query.setParameter("defnType", analyticsDTO.getDefinationType())).thenReturn(query);
        when(query.setParameter("effectiveDate", effectiveDate)).thenReturn(query);

        // Mock query results
        when(query.getResultList()).thenReturn(configList);

        // Execute the method
        List<SRRConfiguration> result = srrAccountMgmtDmpl.findSrrConfigWithDefnTypeAndDate(analyticsDTO, effectiveDate);

        // Assertions
        assertNotNull(result);
        assertEquals(2, result.size());

        // Verify the interactions with the mocked objects
        verify(em, times(1)).createNativeQuery(anyString(), eq(SRRConfiguration.class));
        verify(query, times(1)).setParameter("countrySkeys", analyticsDTO.getCountrySkeys());
        verify(query, times(1)).setParameter("entitySkeys", analyticsDTO.getEntitySkeys());
        verify(query, times(1)).setParameter("currencySkeys", analyticsDTO.getCurrencySkeys());
        verify(query, times(1)).setParameter("defnType", analyticsDTO.getDefinationType());
        verify(query, times(1)).setParameter("effectiveDate", effectiveDate);
        verify(query, times(1)).getResultList();
    }
}
