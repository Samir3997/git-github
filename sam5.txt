package com.maybank.ilm.core.dao;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.entity.DimEntity;

public class DimDaoImplTest {

    @InjectMocks
    private DimDaoImpl dimDaoImpl;

    @Mock
    private EntityManager em;

    @Mock
    private Query query;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(em.createNamedQuery("GETENTITYCODE", String.class)).thenReturn(query);
    }

    @Test
    public void testGetEntityCode_Success() {
        // Arrange
        Long entitySkey = 1L;
        String expectedCode = "ENTITY_CODE_123";
        
        when(query.setParameter("entitySkey", entitySkey)).thenReturn(query);
        when(query.getSingleResult()).thenReturn(expectedCode);

        // Act
        String result = dimDaoImpl.getEntityCode(entitySkey);

        // Assert
        verify(query).setParameter("entitySkey", entitySkey);
        verify(query).getSingleResult();
        assert(result.equals(expectedCode));
    }

    @Test
    public void testGetEntityCode_Exception() {
        // Arrange
        Long entitySkey = 1L;
        
        when(query.setParameter("entitySkey", entitySkey)).thenReturn(query);
        when(query.getSingleResult()).thenThrow(new RuntimeException("No result found"));

        // Act
        String result = dimDaoImpl.getEntityCode(entitySkey);

        // Assert
        verify(query).setParameter("entitySkey", entitySkey);
        verify(query).getSingleResult();
        assert(result == null); // Expecting null if an exception occurs
    }
}
