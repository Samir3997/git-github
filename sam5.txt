import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.time.LocalDate;
import java.util.Collections;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.core.dao.RentasBalancingDaoImpl;

public class RentasBalancingDaoImplTest {

    @Mock
    private EntityManager em;

    @Mock
    private Query query;

    @InjectMocks
    private RentasBalancingDaoImpl rentasBalancingDaoImpl;

    private final String sqlString = "SELECT * FROM account_balance_management WHERE ..."; // Replace with actual SQL
    private final LocalDate analysisData = LocalDate.of(2023, 8, 1);
    private final Long entityAccountMapSkey = 123L;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetRentasBalancingDrillDown() {
        // Given
        List<AccountBalanceManagement> expectedResults = Collections.singletonList(new AccountBalanceManagement());
        
        // Mocking the query behavior
        when(em.createNativeQuery(sqlString, AccountBalanceManagement.class)).thenReturn(query);
        when(query.setParameter("mapSkeyList", Collections.singletonList(entityAccountMapSkey))).thenReturn(query);
        when(query.setParameter("valueDate", analysisData)).thenReturn(query);
        when(query.getResultList()).thenReturn(expectedResults);

        // When
        List<AccountBalanceManagement> actualResults = rentasBalancingDaoImpl.getRentasBalancingDrillDown(sqlString, analysisData, entityAccountMapSkey);

        // Then
        assertNotNull(actualResults);
        assertEquals(expectedResults, actualResults);

        // Verify that the query was created and parameters were set correctly
        verify(em).createNativeQuery(sqlString, AccountBalanceManagement.class);
        verify(query).setParameter("mapSkeyList", Collections.singletonList(entityAccountMapSkey));
        verify(query).setParameter("valueDate", analysisData);
        verify(query).getResultList();
    }
}
