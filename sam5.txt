import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

import com.maybank.ilm.core.dao.ConfigRepo;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.nostro.nostroapihandlers.BnyApiRespHandler;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.Nostro.NostroApiCommon;
import com.maybank.ilm.dto.Nostro.NostroBalanceDTO;
import com.maybank.ilm.dto.Nostro.NostroRequestDTO;
import com.maybank.ilm.dto.Nostro.NostroTransaction;
import com.maybank.ilm.dto.Nostro.bnydto.BnyApiResponseDTO;
import com.maybank.ilm.dto.Nostro.bnydto.BnyBalanceList;
import com.maybank.ilm.dto.Nostro.bnydto.BnyEntryList;
import com.maybank.ilm.dto.Nostro.bnydto.BnyStatementDTO;

class BnyApiRespHandlerTest {

    @InjectMocks
    private BnyApiRespHandler bnyApiRespHandler;

    @Mock
    private EntityAccountMappingRepo accountMappingRepo;

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ConfigRepo configRepo;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testNostroApiService_PastPeriod_Successful() {
        // Set up mock objects and expected values
        NostroRequestDTO apiDTO = new NostroRequestDTO();
        apiDTO.setReportType("PP");
        apiDTO.setFromDate(LocalDate.of(2023, 1, 1));
        apiDTO.setToDate(LocalDate.of(2023, 12, 31));

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer token");

        BnyApiResponseDTO bnyApiResponseDTO = new BnyApiResponseDTO();
        bnyApiResponseDTO.getMetadata().setSuccess(true);

        BnyStatementDTO bnyStatementDTO = new BnyStatementDTO();
        bnyStatementDTO.getAccount().setCurrency("USD");

        BnyEntryList bnyEntryList = new BnyEntryList();
        bnyEntryList.setCreditDebitIndicator("CR");
        bnyEntryList.setAmount(new BigDecimal("100.00"));
        bnyStatementDTO.getEntry().add(bnyEntryList);

        BnyBalanceList bnyBalanceList = new BnyBalanceList();
        bnyBalanceList.setType(new BnyBalanceList.Type());
        bnyBalanceList.getType().setCodeOrProprietary("CLAV");
        bnyBalanceList.setAmount(new BigDecimal("1000.00"));
        bnyStatementDTO.getBalance().add(bnyBalanceList);

        bnyApiResponseDTO.getData().getStatement().add(bnyStatementDTO);

        when(configRepo.getConfigByShortCode(any(), any())).thenReturn(Collections.singletonList(new Config("BNY_API", "https://api.bny.com/balance")));
        when(restTemplate.exchange(any(), any(), any(), any())).thenReturn(ResponseEntity.ok("{\"access_token\":\"token\"}"));
        when(restTemplate.exchange(any(), any(), any(), any())).thenReturn(ResponseEntity.ok(bnyApiResponseDTO));

        // Call the method and assert the results
        List<NostroApiCommon> result = bnyApiRespHandler.nostroApiService(apiDTO);

        assertEquals(1, result.size());
        NostroApiCommon apiCommon = result.get(0);
        assertEquals(1, apiCommon.getNostroTransactionDTO().size());
        NostroTransaction transaction = apiCommon.getNostroTransactionDTO().get(0);
        assertEquals("CR", transaction.getTransactionType());
        assertEquals(new BigDecimal("100.00"), transaction.getTotalAmount());
        assertEquals("USD", transaction.getCurrency());
        assertEquals(1, apiCommon.getNostroBalanceDTO().size());
        NostroBalanceDTO balance = apiCommon.getNostroBalanceDTO().get(0);
        assertEquals(new BigDecimal("1000.00"), balance.getRunningBalance());
    }

    // Add more test cases for different scenarios like intra-day report, errors, etc.
}
