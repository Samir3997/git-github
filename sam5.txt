package com.maybank.ilm.core.swiftmsghandlers;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;

import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.util.DateUtil;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.AccountBalanceMgmtDTO;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.EntityAccountMapDefinition;
import com.maybank.ilm.entity.FinMT103;

public class MT103HandlerTest {

    @InjectMocks
    private MT103Handler mt103Handler;

    @Mock
    private EntityAccountMappingRepo eamRepo;

    @Mock
    private EntityAccountMapDefinition entityAccountMapDefinition;

    @Mock
    private FinMT103 finMT103;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        when(DateUtil.getDateFromString(anyString())).thenReturn(LocalDate.now());
        when(mt103Handler.getCurrentDateTimeByZone()).thenReturn(LocalDateTime.now());
    }

    @Test
    public void testSaveToAcctBalMgmtAndMappingForMYROutput() {
        // Setup
        when(finMT103.getBlock4().getBlock4Tag32aCurrency()).thenReturn(ILMCoreConstants.MYR);
        when(finMT103.getBlock2().getBlock2InOutInd()).thenReturn(ILMCoreConstants.OUTPUTIND);
        when(finMT103.getBlock4().getBlock4Tag32aSettledAmnt()).thenReturn(BigDecimal.valueOf(1000));
        when(finMT103.getTags52().getBlock4Tag52aBic()).thenReturn("BIC1");
        when(finMT103.getTags57().getBlock4Tag57aBic()).thenReturn("BIC2");
        when(finMT103.getBlock4().getBlock4Tag32aDate()).thenReturn("2024-08-22");
        when(finMT103.getBlock4().getBlock4Tag20()).thenReturn("REF123");
        when(finMT103.getBlock2MessageType()).thenReturn("MT103");
        when(mt103Handler.findEamDefn(anyString(), any(), anyString(), anyString(), anyString()))
            .thenReturn(entityAccountMapDefinition);
        when(entityAccountMapDefinition.getEntityIdentifier()).thenReturn("ENTITY123");
        when(entityAccountMapDefinition.getEntityAcctMapSkey()).thenReturn(1L);

        // Execute
        mt103Handler.saveToAcctBalMgmtAndMapping(finMT103);

        // Verify
        verify(mt103Handler).setBalanceManagement(anyLong(), any(BigDecimal.class), anyString(), anyLong(),
                any(LocalDateTime.class), any(LocalDate.class), any(), anyString(), anyString(), anyString(),
                anyString(), anyString(), anyString(), anyString(), anyString(), anyString(), anyChar());
        verify(mt103Handler).saveEntities(anyList(), eq(finMT103));
    }

    @Test
    public void testSaveToAcctBalMgmtAndMappingForNostroInputBlocked() {
        // Setup
        when(finMT103.getBlock4().getBlock4Tag32aCurrency()).thenReturn("USD");
        when(finMT103.getBlock2().getBlock2InOutInd()).thenReturn(ILMCoreConstants.INPUTIND);
        when(finMT103.getBlock4().getBlock4Tag32aSettledAmnt()).thenReturn(BigDecimal.valueOf(1000));
        when(finMT103.getTags53().getBlock4Tag53aBic()).thenReturn("BIC3");
        when(finMT103.getBlock2().getBlock2ReceiverAddr()).thenReturn("BIC4ADDRESS");
        when(mt103Handler.blockMT103MsgITypeDebitMsg(any(), anyString())).thenReturn(true);

        // Execute & Verify
        assertThrows(RuntimeException.class, () -> mt103Handler.saveToAcctBalMgmtAndMapping(finMT103));
        verify(mt103Handler).blockMT103MsgITypeDebitMsg(any(), anyString());
    }

    @Test
    public void testBlockMT103MsgOTypeCreditMsg() {
        // Setup
        when(finMT103.getTags59().getBlock4Tag59Acct()).thenReturn("123456789");
        when(finMT103.getTags59().getBlock4Tag59aBic()).thenReturn("MBBEMYKL");

        // Execute
        boolean result = mt103Handler.blockMT103MsgOTypeCreditMsg(finMT103, "USD");

        // Verify
        assertTrue(result);
    }

    @Test
    public void testValidateMessage() {
        // Setup
        when(finMT103.getTags57().getBlock4Tag57aBic()).thenReturn("BIC2");
        when(finMT103.getTags72()).thenReturn("TAG72");
        when(finMT103.getBlock1().getBlock1LogicalTerminal()).thenReturn("TERM1");
        when(finMT103.getBlock4().getBlock4Tag32aCurrency()).thenReturn("USD");
        when(finMT103.getBlock4().getBlock4Tag32aDate()).thenReturn("2024-08-22");
        when(finMT103.getBlock4().getBlock4Tag20()).thenReturn("REF123");
        when(finMT103.getBlock4().getBlock4Tag32aSettledAmnt()).thenReturn(BigDecimal.valueOf(1000));

        // Execute
        AccountBalanceMgmtDTO result = mt103Handler.validateMessage(finMT103);

        // Verify
        assertNotNull(result);
    }
}
