import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.dto.AccountBalanceAggregationDTO;
import com.maybank.ilm.dto.RequestAnalyticsDTO;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import org.springframework.beans.BeanUtils;

public class SRRAccountMgmtDmplTest {

    @InjectMocks
    private SRRAccountMgmtDmpl srrAccountMgmtDmpl;

    @Mock
    private EntityManager em;

    @Mock
    private Query query;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAccountDetails() {
        // Mocking RequestAnalyticsDTO
        RequestAnalyticsDTO analyticsDTO = new RequestAnalyticsDTO();
        analyticsDTO.setEntityAcctmapSkey(123L);
        analyticsDTO.setFromDate(LocalDate.of(2023, 1, 1));
        analyticsDTO.setToDate(LocalDate.of(2023, 1, 31));
        analyticsDTO.setAggrInd("Y");

        // Mocking AccountBalanceAggregation entity
        AccountBalanceAggregation aggregation1 = new AccountBalanceAggregation();
        aggregation1.setEntityAcctMapSkey(123L);
        aggregation1.setAggrInd("Y");

        AccountBalanceAggregation aggregation2 = new AccountBalanceAggregation();
        aggregation2.setEntityAcctMapSkey(123L);
        aggregation2.setAggrInd("Y");

        List<AccountBalanceAggregation> aggregationList = Arrays.asList(aggregation1, aggregation2);

        // Mock the behavior of createNativeQuery
        when(em.createNativeQuery(anyString(), eq(AccountBalanceAggregation.class))).thenReturn(query);
        when(query.unwrap(org.hibernate.query.NativeQuery.class)).thenReturn(query);

        // Set query parameters
        when(query.setParameter("entityAcctMapSkey", analyticsDTO.getEntityAcctmapSkey())).thenReturn(query);
        when(query.setParameter("fromDate", analyticsDTO.getFromDate())).thenReturn(query);
        when(query.setParameter("toDate", analyticsDTO.getToDate())).thenReturn(query);
        when(query.setParameter("aggrInd", analyticsDTO.getAggrInd())).thenReturn(query);

        // Mock query results
        when(query.getResultList()).thenReturn(aggregationList);

        // Execute the method
        List<AccountBalanceAggregationDTO> result = srrAccountMgmtDmpl.getAccountDetails(analyticsDTO);

        // Assertions
        assertNotNull(result);
        assertEquals(2, result.size());

        // Verify that the properties were copied correctly
        for (int i = 0; i < result.size(); i++) {
            AccountBalanceAggregationDTO dto = result.get(i);
            AccountBalanceAggregation entity = aggregationList.get(i);

            assertEquals(entity.getEntityAcctMapSkey(), dto.getEntityAcctMapSkey());
            assertEquals(entity.getAggrInd(), dto.getAggrInd());
        }

        // Verify the interactions with the mocked objects
        verify(em, times(1)).createNativeQuery(anyString(), eq(AccountBalanceAggregation.class));
        verify(query, times(1)).setParameter("entityAcctMapSkey", analyticsDTO.getEntityAcctmapSkey());
        verify(query, times(1)).setParameter("fromDate", analyticsDTO.getFromDate());
        verify(query, times(1)).setParameter("toDate", analyticsDTO.getToDate());
        verify(query, times(1)).setParameter("aggrInd", analyticsDTO.getAggrInd());
        verify(query, times(1)).getResultList();
    }
}
