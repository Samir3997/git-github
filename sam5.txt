import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.collections4.CollectionUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.dao.BlotterDao;
import com.maybank.ilm.core.dao.BlotterDaoImpl;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.BlotterParamsDTO;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import com.maybank.ilm.entity.AccountBalanceManagement;

public class BlotterDaoImplTest {

    @Mock
    private EntityManager em;

    @Mock
    private CriteriaBuilder criteriaBuilder;

    @Mock
    private CriteriaQuery<AccountBalanceManagement> criteriaQuery;

    @Mock
    private Root<AccountBalanceManagement> root;

    private BlotterDao blotterDao;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        blotterDao = new BlotterDaoImpl();
        blotterDao.em = em;
    }

    @Test
    public void testGetDrillDownDetails_AllParams() {
        BlotterParamsDTO paramsDto = new BlotterParamsDTO();
        paramsDto.setValueDt(LocalDate.now());
        List<Long> eamSkeys = Arrays.asList(1L, 2L);
        List<String> msgTypesToExclude = Arrays.asList(ILMCoreConstants.MESSAGETYPE940, ILMCoreConstants.MESSAGETYPE950, ILMCoreConstants.MXTYPECAMT05300108);
        when(em.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(AccountBalanceManagement.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(AccountBalanceManagement.class)).thenReturn(root);

        blotterDao.getDrillDownDetails(paramsDto, eamSkeys);

        verify(criteriaBuilder, times(1)).equal(root.get("valueDate"), paramsDto.getValueDt());
        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE940);
        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE950);
        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants.MXTYPECAMT05300108);

        // Nostro with Running Balance
        paramsDto.setAcctName(ILMCoreConstants.NOSTROACCOUNT);
        paramsDto.setDrillDownInd(ILMCoreConstants.RUNNING_BALANCE);
        blotterDao.getDrillDownDetails(paramsDto, eamSkeys);

        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE103);
        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE200);
        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants.MESSAGETYPE202);

        // Nostro with Projected Balance
        paramsDto.setDrillDownInd(ILMCoreConstants.PROJECTED_BALANCE);
        blotterDao.getDrillDownDetails(paramsDto, eamSkeys);

        verify(criteriaBuilder, times(1)).notEqual(root.get("messageType"), ILMCoreConstants
