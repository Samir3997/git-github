package com.maybank.ilm.core.swiftmsghandlers;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.powermock.api.mockito.PowerMockito.*;

import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import com.maybank.ilm.util.DateUtil;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.modules.junit4.PowerMockRunner;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore("javax.management.*")
public class MXMsgHandlerAbstractImplTest {

    @InjectMocks
    private MXMsgHandlerAbstractImpl msgHandler;

    @Mock
    private AccountBalanceAggregation mockAccountBalanceAggregation;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(DateUtil.class);
    }

    @Test
    public void testGetAggregations() {
        // Given
        List<AccountBalanceManagement> allEntries = new ArrayList<>();
        allEntries.add(new AccountBalanceManagement(1L, BigDecimal.valueOf(100), ILMCoreConstants.PLUS, 1L, LocalDateTime.now(), LocalDate.now(), LocalDate.now(), ILMCoreConstants.MESSAGETYPE192, "SENDER1", "RECEIVER1", "TRN1", "REF1", "MYR", 'Y'));
        allEntries.add(new AccountBalanceManagement(1L, BigDecimal.valueOf(-50), ILMCoreConstants.MINUS, 2L, LocalDateTime.now(), LocalDate.now(), LocalDate.now(), ILMCoreConstants.MESSAGETYPE192, "SENDER1", "RECEIVER1", "TRN1", "REF1", "MYR", 'N'));
        allEntries.add(new AccountBalanceManagement(2L, BigDecimal.valueOf(200), ILMCoreConstants.PLUS, 3L, LocalDateTime.now().minusDays(1), LocalDate.now().minusDays(1), LocalDate.now().minusDays(1), ILMCoreConstants.MESSAGETYPE292, "SENDER2", "RECEIVER2", "TRN2", "REF2", "MYR", 'Y'));

        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // Mock static methods
        when(DateUtil.findDtEqualsCurrenctDt(any(LocalDate.class))).thenReturn(true);

        // When
        msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

        // Then
        assertEquals(2, aggregations.size()); // Assuming correct aggregations
        verify(msgHandler, times(2)).lockDBAndAggregate(any(AccountBalanceManagement.class), any(LocalDate.class), any(BigDecimal.class), any(String.class), any(BigDecimal.class), any(BigDecimal.class), any(String.class), anyList());
    }

    @Test
    public void testGetAggregationsWithEmptyList() {
        // Given
        List<AccountBalanceManagement> allEntries = new ArrayList<>();
        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // When
        msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

        // Then
        assertTrue(aggregations.isEmpty());
        verifyNoInteractions(mockAccountBalanceAggregation);
    }

    @Test
    public void testGetAggregationsWithNullList() {
        // Given
        List<AccountBalanceManagement> allEntries = null;
        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // When
        msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

        // Then
        assertTrue(aggregations.isEmpty());
        verifyNoInteractions(mockAccountBalanceAggregation);
    }

    @Test
    public void testGetAggregationsWithDateMismatch() {
        // Given
        List<AccountBalanceManagement> allEntries = new ArrayList<>();
        allEntries.add(new AccountBalanceManagement(1L, BigDecimal.valueOf(100), ILMCoreConstants.PLUS, 1L, LocalDateTime.now(), LocalDate.now(), LocalDate.now(), ILMCoreConstants.MESSAGETYPE192, "SENDER1", "RECEIVER1", "TRN1", "REF1", "MYR", 'Y'));
        allEntries.add(new AccountBalanceManagement(2L, BigDecimal.valueOf(-50), ILMCoreConstants.MINUS, 2L, LocalDateTime.now().minusDays(1), LocalDate.now().minusDays(1), LocalDate.now().minusDays(1), ILMCoreConstants.MESSAGETYPE292, "SENDER2", "RECEIVER2", "TRN2", "REF2", "MYR", 'N'));

        List<AccountBalanceAggregation> aggregations = new ArrayList<>();

        // Mock static methods
        when(DateUtil.findDtEqualsCurrenctDt(any(LocalDate.class))).thenReturn(false);

        // When
        msgHandler.getAggregations(allEntries, aggregations, "AGGR_IND");

        // Then
        assertEquals(2, aggregations.size()); // Assuming correct aggregations
        verify(msgHandler, times(2)).lockDBAndAggregate(any(AccountBalanceManagement.class), any(LocalDate.class), any(BigDecimal.class), any(String.class), any(BigDecimal.class), any(BigDecimal.class), any(String.class), anyList());
    }
}
