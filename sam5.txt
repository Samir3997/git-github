import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import com.maybank.ilm.core.dao.SRRAccountMgmtDmpl;
import com.maybank.ilm.dto.RequestAnalyticsDTO;
import com.maybank.ilm.entity.SRRConfiguration;

public class SRRAccountMgmtDmplTest {

    @InjectMocks
    private SRRAccountMgmtDmpl srrAccountMgmtDmpl;

    @Mock
    private EntityManager em;

    @Mock
    private CriteriaBuilder criteriaBuilder;

    @Mock
    private CriteriaQuery<SRRConfiguration> criteriaQuery;

    @Mock
    private Root<SRRConfiguration> root;

    @Mock
    private TypedQuery<SRRConfiguration> mockQuery;

    @Mock
    private Predicate predicate;

    @Mock
    private Expression<Object> expression;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetSrrConfigByTypeWithPredicates() {
        // Arrange
        RequestAnalyticsDTO analyticsDTO = new RequestAnalyticsDTO();
        analyticsDTO.setCountrySkeys(Arrays.asList(1L, 2L));
        analyticsDTO.setEntitySkeys(Arrays.asList(3L, 4L));
        analyticsDTO.setCurrencySkeys(Arrays.asList(5L, 6L));
        analyticsDTO.setDefinationType("TEST_TYPE");

        SRRConfiguration srrConfig = new SRRConfiguration(); 
        List<SRRConfiguration> mockResult = Arrays.asList(srrConfig); 

        when(em.getCriteriaBuilder()).thenReturn(criteriaBuilder);
        when(criteriaBuilder.createQuery(SRRConfiguration.class)).thenReturn(criteriaQuery);
        when(criteriaQuery.from(SRRConfiguration.class)).thenReturn(root);

        // Mocking the behavior for countrySkey predicate
        when(root.get("countrySkey")).thenReturn(expression);
        when(expression.in(analyticsDTO.getCountrySkeys())).thenReturn(predicate);

        // Mocking the behavior for entitySkey predicate
        when(root.get("entitySkey")).thenReturn(expression);
        when(expression.in(analyticsDTO.getEntitySkeys())).thenReturn(predicate);

        // Mocking the behavior for currencySkey predicate
        when(root.get("currencySkey")).thenReturn(expression);
        when(expression.in(analyticsDTO.getCurrencySkeys())).thenReturn(predicate);

        // Mocking query execution
        when(em.createQuery(criteriaQuery)).thenReturn(mockQuery);
        when(mockQuery.getResultList()).thenReturn(mockResult);

        // Act
        List<SRRConfiguration> result = srrAccountMgmtDmpl.getSrrConfigByType(analyticsDTO);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(srrConfig, result.get(0));

        // Verify that the correct methods were called
        verify(root).get("countrySkey");
        verify(expression).in(analyticsDTO.getCountrySkeys());

        verify(root).get("entitySkey");
        verify(expression).in(analyticsDTO.getEntitySkeys());

        verify(root).get("currencySkey");
        verify(expression).in(analyticsDTO.getCurrencySkeys());

        verify(em).getCriteriaBuilder();
        verify(em).createQuery(criteriaQuery);
        verify(mockQuery).getResultList();
    }
}
