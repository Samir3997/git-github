package com.maybank.ilm.core.dao;

import com.maybank.ilm.dto.ClosingBalanceDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

class ClosingBalanceDaoImplTest {

    private ClosingBalanceDaoImpl closingBalanceDao;

    @Mock
    private Query mockQuery;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        closingBalanceDao = new ClosingBalanceDaoImpl();
    }

    @Test
    void testCollectQueryToDTO1() {
        // Arrange
        List<Object[]> mockRows = new ArrayList<>();
        mockRows.add(new Object[]{ "2024-10-01", new BigDecimal("1000.00") });
        mockRows.add(new Object[]{ "2024-10-02", new BigDecimal("2000.00") });

        when(mockQuery.getResultList()).thenReturn(mockRows);

        // Act
        ClosingBalanceDto result = closingBalanceDao.testCollectQueryToDTO1(mockQuery);

        // Assert
        LinkedHashMap<String, ArrayList<BigDecimal>> expectedDatedAmounts = new LinkedHashMap<>();
        expectedDatedAmounts.put("2024-10-01", new ArrayList<BigDecimal>() {{ add(new BigDecimal("1000.00")); }});
        expectedDatedAmounts.put("2024-10-02", new ArrayList<BigDecimal>() {{ add(new BigDecimal("2000.00")); }});

        assertEquals(expectedDatedAmounts, result.getDatedAmounts());
    }
}
