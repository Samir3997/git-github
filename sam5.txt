package com.maybank.ilm.core.swiftmsghandlers;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collections;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.maybank.ilm.core.dao.DimDao;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.AccountBalanceMgmtDTO;
import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.EntityAccountMapDefinition;
import com.maybank.ilm.entity.FinMT103;
import com.prowidesoftware.swift.model.mx.MxCamt05400108;
import com.prowidesoftware.swift.model.mx.dic.BankToCustomerDebitCreditNotificationV08;
import com.prowidesoftware.swift.model.mx.dic.EntryTransaction10;
import com.prowidesoftware.swift.model.mx.dic.Notification15;
import com.prowidesoftware.swift.model.mx.dic.ReportEntry10;
import com.prowidesoftware.swift.model.mx.dic.ActiveOrHistoricCurrencyAndAmount;

@ExtendWith(MockitoExtension.class)
public class MXcamt05400108HandlerTest {

    @InjectMocks
    private MXcamt05400108Handler handler;

    @Mock
    private EntityAccountMappingRepo eamRepo;

    @Mock
    private DimDao dimDao;

    @Mock
    private MxCamt05400108 camt05400108;

    @Mock
    private BankToCustomerDebitCreditNotificationV08 notification;

    @Mock
    private Notification15 ntfctn;

    @Mock
    private ReportEntry10 entry;

    @Mock
    private EntryTransaction10 txDetails;

    @Mock
    private ActiveOrHistoricCurrencyAndAmount amount;

    @BeforeEach
    void setUp() {
        // Common setup before each test
    }

    @Test
    void testSaveToAcctBalMgmtAndMapping_WithValidData() {
        // Setup mock data
        when(camt05400108.getBkToCstmrDbtCdtNtfctn()).thenReturn(notification);
        when(notification.getNtfctn()).thenReturn(Collections.singletonList(ntfctn));
        when(ntfctn.getNtry()).thenReturn(Collections.singletonList(entry));
        when(entry.getAmt()).thenReturn(amount);
        when(amount.getCcy()).thenReturn("MYR");
        when(amount.getValue()).thenReturn(BigDecimal.ONE);
        when(entry.getCdtDbtInd().value()).thenReturn(ILMCoreConstants.CRED);
        when(entry.getNtryDtls()).thenReturn(Collections.singletonList(mock(EntryTransaction10.class)));

        // Mock other methods if needed

        // Call the method under test
        assertDoesNotThrow(() -> handler.saveToAcctBalMgmtAndMapping(camt05400108, 1L));

        // Verify the interactions and behavior
        verify(eamRepo, times(1)).findByAccountNumber(anyString());
    }

    @Test
    void testGetMessageType() {
        String expected = ILMCoreConstants.MXTYPECAMT05400108;
        assertEquals(expected, handler.getMessageType());
    }

    @Test
    void testValidateMessage() {
        FinMT103 finMT103 = mock(FinMT103.class);
        when(finMT103.getTags57()).thenReturn(mock(FinMT103.Tags57.class));
        when(finMT103.getTags57().getBlock4Tag57aBic()).thenReturn("BICCODE");
        when(finMT103.getTags72()).thenReturn("Tags72");
        when(finMT103.getBlock1()).thenReturn(mock(FinMT103.Block1.class));
        when(finMT103.getBlock1().getBlock1LogicalTerminal()).thenReturn("LogicalTerminal");
        when(finMT103.getBlock4()).thenReturn(mock(FinMT103.Block4.class));
        when(finMT103.getBlock4().getBlock4Tag32aCurrency()).thenReturn("Currency");
        when(finMT103.getBlock4().getBlock4Tag32aDate()).thenReturn("2024-08-28");
        when(finMT103.getBlock4().getBlock4Tag20()).thenReturn("Tag20");
        when(finMT103.getBlock4().getBlock4Tag32aSettledAmnt()).thenReturn(BigDecimal.TEN);

        AccountBalanceMgmtDTO result = handler.validateMessage(finMT103);
        assertNotNull(result);
    }

    @Test
    void testCreateEntriesForICRU_WithICRUAmount() {
        // Setup mock data
        AccountBalanceManagement mgmt = mock(AccountBalanceManagement.class);
        String addtlTxInf = "ICRU/1000";
        when(camt05400108.getBkToCstmrDbtCdtNtfctn()).thenReturn(notification);
        when(notification.getNtfctn()).thenReturn(Collections.singletonList(ntfctn));
        when(ntfctn.getNtry()).thenReturn(Collections.singletonList(entry));
        when(entry.getNtryDtls()).thenReturn(Collections.singletonList(mock(EntryTransaction10.class)));

        // Call the method under test
        handler.createEntriesForICRU(Collections.emptyList(), mgmt, camt05400108, addtlTxInf);

        // Verify the behavior
        // You might want to verify if the entries were added to the list or mock the saveEntitiesForMX method
    }

    @Test
    void testExtractAccountNumber_DebitCase() {
        // Setup mock data
        String creditDebitInd = ILMCoreConstants.DBIT;
        LocalDate valueDate = LocalDate.now();
        String currencyCode = "MYR";

        when(txDetails.getAddtlTxInf()).thenReturn("PAYA/123456");
        when(camt05400108.getBkToCstmrDbtCdtNtfctn()).thenReturn(notification);

        String result = handler.extractAccountNumber(camt05400108, creditDebitInd, txDetails, currencyCode, valueDate);
        assertEquals("123456", result);
    }

    @Test
    void testExtractFromAddlTxInf() {
        String addtlTxInf = "TRN/12345";
        String result = handler.extractFromAddlTxInf(addtlTxInf, "TRN");
        assertEquals("12345", result);
    }

    @Test
    void testExtractCounterParty_WithCPRB() {
        String addtlTxInf = "CPRB/BICCODE";
        when(eamRepo.findByAccountNumber(anyString())).thenReturn(null);
        String result = handler.extractCounterParty(addtlTxInf);
        assertEquals("BICCODE", result);
    }

    @Test
    void testExtractCounterParty_WithCPRA() {
        String addtlTxInf = "CPRA/ACCOUNTNO";
        when(eamRepo.findByAccountNumber(anyString())).thenReturn(mock(EntityAccountMapDefinition.class));
        String result = handler.extractCounterParty(addtlTxInf);
        assertNotNull(result);
    }

    @Test
    void testSetICRUEntry_WithValidData() {
        // Setup mock data
        AccountBalanceManagement mgmt = mock(AccountBalanceManagement.class);
        String sIcruAmnt = "1000";
        String acctName = ILMCoreConstants.KACCOUNT;
        String entityBic = "ENTITYBIC";

        when(camt05400108.getBkToCstmrDbtCdtNtfctn()).thenReturn(notification);
        when(notification.getNtfctn()).thenReturn(Collections.singletonList(ntfctn));
        when(ntfctn.getNtry()).thenReturn(Collections.singletonList(entry));
        when(entry.getNtryDtls()).thenReturn(Collections.singletonList(mock(EntryTransaction10.class)));
        when(eamRepo.findByAccountNumber(anyString())).thenReturn(mock(EntityAccountMapDefinition.class));

        AccountBalanceManagement result = handler.setICRUEntry(camt05400108, sIcruAmnt, mgmt, acctName);
        assertNotNull(result);
    }
}
