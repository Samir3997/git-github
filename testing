package com.maybank.ilm.entity;

import java.math.BigDecimal;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.maybank.ilm.core.util.ILMCoreConstants;

@Entity
@Table(name = "PRC_ENTITY_ACCOUNT_MAP_DEFN")
@NamedQueries({
	@NamedQuery(name = "GETDEFNBYACCTNUM", query = "select ea from EntityAccountMapDefinition ea where ea.accountNumber =:acctNum and ea.currencySkey =:currencySkey"),
	@NamedQuery(name = "GETDEFNBYENTITYIDANDACCTTYPE", query = "select ea from EntityAccountMapDefinition ea where ea.entityIdentifier =:entityID and ea.accountType =:acctType"),
	@NamedQuery(name = "DELETEENTITYACCTDEFNSBYSKEYS", query = "delete from EntityAccountMapDefinition ea where ea.entityAcctMapSkey IN ( :defnSkeys )")
})
public class EntityAccountMapDefinition {

	@Id
	@Column(name = "N_ENTITY_ACCT_MAP_SKEY")
	@SequenceGenerator(name = "entityAcctMapSkey", sequenceName = "PRC_ENTITY_ACCOUNT_MAP_SEQ", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "entityAcctMapSkey")
	private Long entityAcctMapSkey;

	@Column(name = "V_ACCOUNT_NUMBER")
	private String accountNumber;

	@Column(name = "V_ACCOUNT_NAME")
	private String accountName;

	@Column(name = "V_ACCOUNT_TYPE")
	private String accountType;

	@Column(name = "N_COUNTRY_SKEY")
	private Long countrySkey;

	@Column(name = "N_ENTITY_SKEY")
	private Long entitySkey;

	@Column(name = "N_CURRENCY_SKEY")
	private Long currencySkey;

	@Column(name="N_MIN_BALANCE")
	private BigDecimal minBalance;

	@Column(name = "V_CREATED_BY")
	private String createdBy;

	@Column(name = "V_ENTITY_IDENTIFIER")
	private String entityIdentifier;

	@Column(name="V_NOSTRO_BANK_NAME")
	private String nostroBankName;

	@Column(name="F_NOSTRO_IND")
	private Character nostroInd;

	@Column(name="V_TYPE_OF_NOSTRO_AGENT")
	private String typeOfNostroAgent;

	@Column(name="F_SWEEPING_AMOUNT_CALCULATION_IND")
	private Character sweepingAmountCalculationInd;
	
	@Column(name ="F_PROJECTED_AMOUNT_CALCULATION_IND")
	private Character projectedAmountCalculationInd;
	
	
	

	public Character getProjectedAmountCalculationInd() {
		return projectedAmountCalculationInd;
	}

	public void setProjectedAmountCalculationInd(Character projectedAmountCalculationInd) {
		this.projectedAmountCalculationInd = projectedAmountCalculationInd;
	}

	public void setNostroInd(Character nostroInd) {
		this.nostroInd = nostroInd;
	}

	public Long getEntityAcctMapSkey() {
		return entityAcctMapSkey;
	}

	public void setEntityAcctMapSkey(Long entityAcctMapSkey) {
		this.entityAcctMapSkey = entityAcctMapSkey;
	}

	public String getAccountNumber() {
		return accountNumber;
	}

	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	public String getAccountName() {
		return accountName;
	}


	public BigDecimal getMinBalance() {
		return minBalance;
	}

	public void setMinBalance(BigDecimal minBalance) {
		this.minBalance = minBalance;
	}

	public Character getNostroInd() {
		return nostroInd;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}

	public String getAccountType() {
		return accountType;
	}

	public void setAccountType(String accountType) {
		this.accountType = accountType;
	}

	public Long getCountrySkey() {
		return countrySkey;
	}

	public void setCountrySkey(Long countrySkey) {
		this.countrySkey = countrySkey;
	}

	public Long getEntitySkey() {
		return entitySkey;
	}

	public void setEntitySkey(Long entitySkey) {
		this.entitySkey = entitySkey;
	}

	public Long getCurrencySkey() {
		return currencySkey;
	}

	public void setCurrencySkey(Long currencySkey) {
		this.currencySkey = currencySkey;
	}

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	public String getEntityIdentifier() {
		return entityIdentifier;
	}

	public void setEntityIdentifier(String entityIdentifier) {
		this.entityIdentifier = entityIdentifier;
	}

	public String getNostroBankName() {
		return nostroBankName;
	}

	public void setNostroBankName(String nostroBankName) {
		this.nostroBankName = nostroBankName;
	}

	public String getTypeOfNostroAgent() {
		return typeOfNostroAgent;
	}

	public void setTypeOfNostroAgent(String typeOfNostroAgent) {
		this.typeOfNostroAgent = typeOfNostroAgent;
	}

	public Character getSweepingAmountCalculationInd() {
		return sweepingAmountCalculationInd;
	}

	public void setSweepingAmountCalculationInd(Character sweepingAmountCalculationInd) {
		this.sweepingAmountCalculationInd = sweepingAmountCalculationInd;
	}


	@Override
	public String toString() {
		return "EntityAccountMapDefinition [entityAcctMapSkey=" + entityAcctMapSkey + ", accountNumber=" + accountNumber
				+ ", accountName=" + accountName + ", accountType=" + accountType + ", countrySkey=" + countrySkey
				+ ", entitySkey=" + entitySkey + ", currencySkey=" + currencySkey + ", minBalance=" + minBalance
				+ ", createdBy=" + createdBy + ", entityIdentifier=" + entityIdentifier + ", nostroBankName="
				+ nostroBankName + ", nostroInd=" + nostroInd + ", typeOfNostroAgent=" + typeOfNostroAgent
				+ ", sweepingAmountCalculationInd=" + sweepingAmountCalculationInd + ", projectedAmountCalculationInd="
				+ projectedAmountCalculationInd + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		//		result = prime * result + ((accountNumber == null) ? 0 : accountNumber.hashCode());
		//		result = prime * result + ((accountName == null) ? 0 : accountName.hashCode());
		result = prime * result + ((accountType == null) ? 0 : accountType.hashCode());
		result = prime * result + ((countrySkey == null) ? 0 : countrySkey.hashCode());
		result = prime * result + ((entitySkey == null) ? 0 : entitySkey.hashCode());
		result = prime * result + ((currencySkey == null) ? 0 : currencySkey.hashCode());
		//		result = prime * result + ((createdBy == null) ? 0 : createdBy.hashCode());
		//		result = prime * result + ((entityIdentifier == null) ? 0 : entityIdentifier.hashCode());
		return result;	
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		EntityAccountMapDefinition other = (EntityAccountMapDefinition) obj;
		//		if (accountName == null) {
		//			if (other.accountName != null)
		//				return false;
		//		} else if (!accountName.equals(other.accountName))
		//			return false;
		if (accountType == null) {
			if (other.accountType != null)
				return false;
		} else if (!accountType.equals(ILMCoreConstants.NOSTROACCOUNT) && !accountType.equals(other.accountType))
			return false;
		if (countrySkey == null) {
			if (other.countrySkey != null)
				return false;
		} else if (!countrySkey.equals(other.countrySkey))
			return false;
		if (entitySkey == null) {
			if (other.entitySkey != null)
				return false;
		} else if (!entitySkey.equals(other.entitySkey))
			return false;
		if (currencySkey == null) {
			if (other.currencySkey != null)
				return false;
		} else if (!currencySkey.equals(other.currencySkey))
			return false;
		if (accountNumber == null) {
			if (other.accountNumber != null)
				return false;
		} else if (other.accountType.equals(ILMCoreConstants.NOSTROACCOUNT) && !accountNumber.equals(other.accountNumber))
			return false;
		//		if (createdBy == null) {
		//			if (other.createdBy != null)
		//				return false;
		//		} else if (!createdBy.equals(other.createdBy))
		//			return false;
		//		if (entityIdentifier == null) {
		//			if (other.entityIdentifier != null)
		//				return false;
		//		} else if (!entityIdentifier.equals(other.entityIdentifier))
		//			return false;
		return true;
	}
}
