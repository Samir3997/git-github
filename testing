package com.example.demo;

import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
public class DemoController {

    // GET endpoint that takes a query parameter 'name' and returns a greeting
    @GetMapping("/greet")
    public String greet(@RequestParam(name = "name", defaultValue = "Guest") String name) {
        return "Hello, " + name + "!";
    }

    // POST endpoint that takes a JSON body and returns a custom message
    @PostMapping("/message")
    public String message(@RequestBody MessageRequest messageRequest) {
        return "Received message: " + messageRequest.getMessage();
    }
}



package com.example.demo;

public class MessageRequest {
    private String message;

    // Default constructor, getters and setters
    public MessageRequest() {}

    public MessageRequest(String message) {
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}




package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}



import requests

# Sending a GET request
response = requests.get('http://localhost:8080/api/greet', params={'name': 'John'})
print(response.text)  # Should print: "Hello, John!"

# If no 'name' parameter is provided
response = requests.get('http://localhost:8080/api/greet')
print(response.text)  # Should print: "Hello, Guest!"




import requests

# Sending a POST request with JSON data
data = {'message': 'Hello from Python'}
response = requests.post('http://localhost:8080/api/message', json=data)
print(response.text)  # Should print: "Received message: Hello from Python"



<dependencies>
    <!-- Spring Web dependency for RestTemplate -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!-- Spring Boot Starter for WebClient (optional alternative to RestTemplate) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
</dependencies>



<dependencies>
    <!-- Spring Web dependency for RestTemplate -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!-- Spring Boot Starter for WebClient (optional alternative to RestTemplate) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
</dependencies>



package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.util.MultiValueMap;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.impl.client.HttpClientBuilder;

@RestController
@RequestMapping("/api")
public class PythonApiClientController {

    @Autowired
    private RestTemplate restTemplate;

    // Get data from Python API
    @GetMapping("/get-python-data")
    public ResponseEntity<String> getPythonData() {
        String url = "http://localhost:5000/getdata"; // Python GET API URL
        
        // Call the Python GET API
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, null, String.class);
        
        // Process and return response from Python API
        return ResponseEntity.ok("Data from Python GET API: " + response.getBody());
    }

    // Post data to Python API
    @PostMapping("/post-python-data")
    public ResponseEntity<String> postPythonData(@RequestBody String data) {
        String url = "http://localhost:5000/postdata"; // Python POST API URL
        
        // Create the POST request with the provided data
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(data, headers);

        // Call the Python POST API
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        // Process and return response from Python API
        return ResponseEntity.ok("Response from Python POST API: " + response.getBody());
    }
}



from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/getdata', methods=['GET'])
def get_data():
    # Example GET endpoint that returns a simple JSON response
    return jsonify({"message": "Hello from Python GET API"})

@app.route('/postdata', methods=['POST'])
def post_data():
    data = request.json  # Get JSON data from the request body
    # Example POST endpoint that echoes back the received data
    return jsonify({"received_data": data}), 200

if __name__ == '__main__':
    app.run(debug=True, port=5000)




{
  "data": "Hello, Python!"
}



<dependencies>
    <!-- Spring Boot Web dependency -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    
    <!-- Spring Data JPA for Database Access -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    
    <!-- H2 Database for local testing -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- For REST API communication -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
</dependencies>



# H2 Database Configuration for Local Development
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# Enable H2 console for testing in the browser
spring.h2.console.enabled=true




package com.example.demo;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

@Entity
public class MessageEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String message;
    private String processedMessage;

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getProcessedMessage() {
        return processedMessage;
    }

    public void setProcessedMessage(String processedMessage) {
        this.processedMessage = processedMessage;
    }
}




package com.example.demo;

import org.springframework.data.jpa.repository.JpaRepository;

public interface MessageRepository extends JpaRepository<MessageEntity, Long> {
    // You can define custom query methods here if needed
}



package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class MessageService {

    @Autowired
    private MessageRepository messageRepository;

    // Process the data (can apply any logic, e.g., transformation)
    public MessageEntity processAndSaveMessage(String message) {
        // Processing logic (e.g., append a prefix to the message)
        String processedMessage = "Processed: " + message;

        // Create a new MessageEntity object
        MessageEntity messageEntity = new MessageEntity();
        messageEntity.setMessage(message);
        messageEntity.setProcessedMessage(processedMessage);

        // Save the entity to the database
        return messageRepository.save(messageEntity);
    }
}



package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

@RestController
@RequestMapping("/api")
public class PythonApiClientController {

    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private MessageService messageService;

    // Get data from Python API
    @GetMapping("/get-python-data")
    public ResponseEntity<String> getPythonData() {
        String url = "http://localhost:5000/getdata"; // Python GET API URL
        
        // Call the Python GET API
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, null, String.class);
        
        // Process and save data to the database
        String message = response.getBody(); // Get the message from the Python API response
        MessageEntity savedMessage = messageService.processAndSaveMessage(message);
        
        // Return saved message from the database
        return ResponseEntity.ok("Data saved to DB: " + savedMessage.getProcessedMessage());
    }

    // Post data to Python API
    @PostMapping("/post-python-data")
    public ResponseEntity<String> postPythonData(@RequestBody String data) {
        String url = "http://localhost:5000/postdata"; // Python POST API URL
        
        // Create the POST request with the provided data
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<String> entity = new HttpEntity<>(data, headers);

        // Call the Python POST API
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

        // Process and save data to the database
        String message = response.getBody(); // Get the message from the Python API response
        MessageEntity savedMessage = messageService.processAndSaveMessage(message);

        // Return saved message from the database
        return ResponseEntity.ok("Data saved to DB: " + savedMessage.getProcessedMessage());
    }
}




SELECT * FROM message_entity;



 https://jsonplaceholder.typicode.com/posts
import requests

url = "https://jsonplaceholder.typicode.com/posts"
response = requests.get(url)
print(response.json())  # Prints the list of posts


https://jsonplaceholder.typicode.com/posts
import requests

url = "https://jsonplaceholder.typicode.com/posts"
data = {
    "title": "foo",
    "body": "bar",
    "userId": 1
}
response = requests.post(url, json=data)
print(response.json())  # Prints the created post with ID


https://reqres.in/api/users/1
import requests

url = "https://reqres.in/api/users/1"
response = requests.get(url)
print(response.json())  # Prints user data for user with ID 1


https://reqres.in/api/users
import requests

url = "https://reqres.in/api/users"
data = {
    "name": "John Doe",
    "job": "Software Developer"
}
response = requests.post(url, json=data)
print(response.json())  # Prints the created user data with an ID



