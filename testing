package com.maybank.ilm.core.dao;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.maybank.ilm.core.util.QueryConstants;
import com.maybank.ilm.entity.AccountBalanceAggregation;

/**
 * The Class FinMessageDaoImpl.
 */
@Repository
public class FinMessageDaoImpl implements FinMessageDao{

	/** The em. */
	@PersistenceContext
	private EntityManager em;
	
	/* (non-Javadoc)
	 * @see com.maybank.ilm.core.dao.FinMessageDao#saveAny(java.lang.Object)
	 */
	@Override
	public <T> void saveAny(T t) {
		em.persist(t);
	}
	
	/* (non-Javadoc)
	 * @see com.maybank.ilm.core.dao.FinMessageDao#updateAny(java.lang.Object)
	 */
	@Override
	public <T> void updateAny(T t) {
		em.merge(t);
	}
	
	@Override
	public BigDecimal getTrackerId() {
		Query query = em.createNativeQuery("select ILM_MT_TRACKER_ID_SEQ.NEXTVAL from dual")
				.unwrap(org.hibernate.query.NativeQuery.class);
		return (BigDecimal) query.getSingleResult();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public AccountBalanceAggregation getLastUpdatedAcctBalAggr(Long entityAcctMapSkey, LocalDate valueDt, String aggrInd){
		Query query = em.createNamedQuery("GETLATESTAGGR", AccountBalanceAggregation.class);
		query.setParameter("entityAcctMapSkey", entityAcctMapSkey);
		query.setParameter("valueDt", valueDt);
		query.setParameter("aggrInd", aggrInd);
		List<AccountBalanceAggregation> aggregations = query.getResultList();
		return aggregations.isEmpty() ? null : aggregations.get(0);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<AccountBalanceAggregation> getLastUpdatedAcctBalAggrForAggrInd(Long entityAcctMapSkey, LocalDate valueDt, String namedquery){
		Query query = em.createNamedQuery(namedquery, AccountBalanceAggregation.class);
		query.setParameter("entityAcctMapSkey", entityAcctMapSkey);
		query.setParameter("valueDt", valueDt);
		return query.getResultList();
	}
	
	@Override
	public void deleteAnyByTrackerID(Long trackerId, String tableName){
		TypedQuery<?> query = em.createNativeQuery(String.format(QueryConstants.DELETEANYBYTRACKERID, tableName))
								.unwrap(org.hibernate.query.NativeQuery.class);
		query.setParameter("trackerId", trackerId);
		query.executeUpdate();
	}

	@Override
	public void detachedAny(Object object) {
		em.detach(object);
		
	}
}
