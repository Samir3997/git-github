else {
				LOGGER.info("Inside MxPacs00800108 handler for Nostro {} and O indicator.", currencyCode);
				if(blockMxPacs00800108OTypeCreditMsg(pacs00800108, currencyCode)) {
					LOGGER.info("Message is blocked");
					throwMsgBlockedException();
				};
				String creditToBIC = pacs00800108.getAppHdr().from().substring(0, 8);
				String tag53aBic = senderCode;
				EntityAccountMapDefinition creditToEAM = null;
				creditToEAM = getDefnByEntityIDAndAcctType(creditToBIC, ILMCoreConstants.NOSTROACCOUNT, currencyCode);
				if (Objects.isNull(creditToEAM)) { //NOSONAR
					creditToEAM = getDefnByEntityIDAndAcctType(tag53aBic, ILMCoreConstants.NOSTROACCOUNT, currencyCode);
				}
				
				if (Objects.isNull(creditToEAM)) { //NOSONAR
					LOGGER.info("Entity defination not found for {} {} {} ", tag53aBic, creditToBIC,
							ILMCoreConstants.NOSTROACCOUNT, currencyCode);
					throwEntityNotFountException();
				}
				
				/* check related Ref */
				String relatedRef = pacs00800108.getFIToFICstmrCdtTrf().getCdtTrfTxInf().get(0).getPmtId().getInstrId();
				Character settled = ILMCoreConstants.NIND;
				if(checkRelatedRefForNostro(valueDate, creditToEAM.getEntityAcctMapSkey(), relatedRef)) { //NOSONAR
					settled = ILMCoreConstants.YIND;
				}
				receiverCode=pacs00800108.getAppHdr().to().substring(0, 8);
				
				try {
					AccountBalanceManagement mgmt = new AccountBalanceManagement(creditToEAM.getEntityAcctMapSkey(), amount,
							ILMCoreConstants.plusSign, trackerId, businessDtTime, valueDate, null,
							ILMCoreConstants.MESSAGETYPE103, tag53aBic, receiverCode, null, relatedRef,
							currencyCode, ILMCoreConstants.NIND, settled, messageType);
					allEntries.add(mgmt);
				} catch(Exception e){
					LOGGER.info("Exception occured In creating management entry: " + e);

			}
			}
				
			saveEntitiesForMX(allEntries);
		}





class ThrowException{

public void throwMsgBlockedException() {
		throw ExceptionUtil.createIlmException(ExceptionConstants.FAILED, ExceptionConstants.MSGBLOCKED);
	}
}







public class ExceptionUtil {

	public static ILMException createIlmException(String status, String exMessage) {		
		ILMException exception = new ILMException(status, LocalDateTime.now(), exMessage);		
		return exception;
	}





package com.maybank.ilm.utility.exception;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ILMException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	private String status;

	@SuppressWarnings("squid:S3437")
	private LocalDateTime localDateTime;

	private String errorLog;
	
	private String msgType;
	
	private Boolean isMailRequired=Boolean.FALSE;
	
	private String templateType;
	
	Map<String, String> objectMap=new HashMap<String, String>();
	
	private Exception exception;
	
	

	public ILMException() {
		super();
	}

	public ILMException(String status, LocalDateTime localDateTime, String errorLog, String msgType) {
		super();
		this.status = status;
		this.localDateTime = localDateTime;
		this.errorLog = errorLog;
		this.msgType = msgType;
	}

	public ILMException(String status, LocalDateTime localDateTime, String errorLog) {
		super(errorLog);
		this.status = status;
		this.localDateTime = localDateTime;
		this.errorLog = errorLog;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getErrorLog() {
		return errorLog;
	}

	public void setErrorLog(String errorLog) {
		this.errorLog = errorLog;
	}

	public LocalDateTime getLocalDateTime() {
		return localDateTime;
	}

	public void setLocalDateTime(LocalDateTime localDateTime) {
		this.localDateTime = localDateTime;
	}

	public String getMsgType() {
		return msgType;
	}

	public void setMsgType(String msgType) {
		this.msgType = msgType;
	}

	public Map<String, String> getObjectMap() {
		return objectMap;
	}

	public void setObjectMap(Map<String, String> objectMap) {
		this.objectMap = objectMap;
	}

	public Boolean getIsMailRequired() {
		return isMailRequired;
	}

	public void setIsMailRequired(Boolean isMailRequired) {
		this.isMailRequired = isMailRequired;
	}

	public String getTemplateType() {
		return templateType;
	}

	public void setTemplateType(String templateType) {
		this.templateType = templateType;
	}

	public Exception getException() {
		return exception;
	}

	public void setException(Exception exception) {
		this.exception = exception;
	}

	

	
}














import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class ThrowExceptionTest {

    @Test
    public void testThrowMsgBlockedException() {
        ThrowException throwException = new ThrowException();

        // Use assertThrows to assert that the exception is thrown
        ILMException thrownException = assertThrows(ILMException.class, () -> {
            throwException.throwMsgBlockedException();
        });

        // Verify the exception's properties
        assertEquals(ExceptionConstants.FAILED, thrownException.getStatus());
        assertEquals(ExceptionConstants.MSGBLOCKED, thrownException.getErrorLog());
    }
}









