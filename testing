package com.maybank.ilm.core.dao;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.maybank.ilm.dto.ClosingBalanceDto;

@Repository
public class ClosingBalanceDaoImpl implements ClosingBalanceDao{

	@Autowired
	EntityManager em;
	
	
	@Override
	public ClosingBalanceDto getClosingBalance(Long eamMainSkey, Long eamSRRSkey, LocalDate fromDate,
			LocalDate toDate) {
		Query query = em.createNativeQuery("select a.d_value_dt, a.n_total_amount as Main , b.n_total_amount as SRR from "+
			"(select * from prc_account_balance_aggr where d_value_dt between :fromDate and :toDate "+
			"and n_entity_acct_map_skey =:eamMainSkey and v_opening_closing_bal_ind='CLOSING_BALANCE') a "+
			"inner join (select * from prc_account_balance_aggr where d_value_dt between :fromDate and :toDate "+
			"and n_entity_acct_map_skey =:eamSRRSkey and v_opening_closing_bal_ind='CLOSING_BALANCE') b on "+
			"a.d_value_dt=b.d_value_dt order by d_value_dt");
		query.setParameter("eamMainSkey", eamMainSkey);
		query.setParameter("eamSRRSkey", eamSRRSkey);
		query.setParameter("fromDate", fromDate);
		query.setParameter("toDate", toDate);
		return collectQueryToDTO(query);
	}
	
	@Override
	public ClosingBalanceDto getClosingBalanceforInvestmentIslamic(Long eamMainSkey, LocalDate fromDate,
			LocalDate toDate) {
		Query query = em.createNativeQuery("select a.d_value_dt, a.n_total_amount as Main from "+
			"(select * from prc_account_balance_aggr where d_value_dt between :fromDate and :toDate "+
			"and n_entity_acct_map_skey =:eamMainSkey and v_opening_closing_bal_ind='CLOSING_BALANCE') a");
		query.setParameter("eamMainSkey", eamMainSkey);
		query.setParameter("fromDate", fromDate);
		query.setParameter("toDate", toDate);
		return collectQueryToDTO1(query);
	}
	
	@Override
	public ClosingBalanceDto getClosingBalanceForSingapore(Long eamMainSkey, LocalDate fromDate,
			LocalDate toDate) {
		 String nativeQuery = "SELECT d_business_dt, n_amount, d_value_dt " +
                 "FROM (" +
                 "    SELECT d_business_dt, n_amount, d_value_dt, " +
                 "           RANK() OVER (PARTITION BY v_message_type, d_value_dt " +
                 "                         ORDER BY d_business_dt DESC) AS rnk " +
                 "    FROM prc_account_balance_mgmt " +
                 "    WHERE n_entity_acct_map_skey = :eamMainSkey " +
                 "      AND v_message_type = '900' " +
                 "      AND d_value_dt BETWEEN :fromDate AND :toDate" +
                 ") " +
                 "WHERE rnk = 1";
		    Query query = em.createNativeQuery(nativeQuery);
		    query.setParameter("eamMainSkey", eamMainSkey);
		    query.setParameter("fromDate", fromDate);
		    query.setParameter("toDate", toDate);
		    return collectQueryToDTO1(query);
		}

	
	
	private ClosingBalanceDto collectQueryToDTO (Query query){
		List<Object[]> rows=query.getResultList();
		ClosingBalanceDto closingBalDto = new ClosingBalanceDto();
		LinkedHashMap<String, ArrayList<BigDecimal>> datedAmounts = new LinkedHashMap<String, ArrayList<BigDecimal>>();
		if(rows.size()>0) {
			for (Object[] row : rows) {
				ArrayList<BigDecimal> values = new ArrayList<>();
				values.add((BigDecimal) row[1]);
				values.add((BigDecimal) row[2]);
				datedAmounts.put(row[0].toString(), values);
				}
			}
		closingBalDto.setDatedAmounts(datedAmounts);
		return closingBalDto;
	}
	
	private ClosingBalanceDto collectQueryToDTO1 (Query query){
		List<Object[]> rows=query.getResultList();
		ClosingBalanceDto closingBalDto = new ClosingBalanceDto();
		LinkedHashMap<String, ArrayList<BigDecimal>> datedAmounts = new LinkedHashMap<String, ArrayList<BigDecimal>>();
		if(rows.size()>0) {
			for (Object[] row : rows) {
				ArrayList<BigDecimal> values = new ArrayList<>();
				values.add((BigDecimal) row[1]);
				datedAmounts.put(row[0].toString(), values);
				}
			}
		closingBalDto.setDatedAmounts(datedAmounts);
		return closingBalDto;
	}
}
