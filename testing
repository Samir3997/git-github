@RunWith(MockitoJUnitRunner.class)
public class MXMsgHandlerAbstractImplTest {

    // ... (other setup as before)

    @Test
    public void testValidateMessage_ValidMessage() {
        // Arrange
        Block4Tag72 tag72 = new Block4Tag72();
        tag72.setBlock4Tag72Nar1("/CPRO/BNMAMYKL/CPRB/MBBEMYKL");
        String currencyCode = "USD";
        String valueDt = "2024-08-28";
        String sendersRef = "SR123";
        String messageType = "MT535";
        BigDecimal amount = BigDecimal.valueOf(100);
        String acctNum = "12345";
        Boolean eamByBic = true;

        EntityAccountMapDefinition expectedDefinition = new EntityAccountMapDefinition();
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey("MBBEMYKL", "MAINACCOUNT", any())).thenReturn(expectedDefinition);
        when(mgmtRepo.findByValueDateAndSendersRefAndMessageType(any(), any(), any())).thenReturn(Collections.emptyList());

        // Act
        AccountBalanceMgmtDTO result = mxMsgHandler.validateMessage(
            "ENTITY_TYPE", tag72, "BLOCK1LT", currencyCode, valueDt, sendersRef, messageType, amount, acctNum, eamByBic
        );

        // Assert
        assertEquals("Validated Successfully.", result.getMessageForUI());
        assertNotNull(result.getEntityIdentifier());
        // ... other assertions to verify the DTO contents
    }

    @Test
    public void testValidateMessage_NoDefinitionFound() {
        // Arrange
        // ... (same as above, but without the definition)
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey("MBBEMYKL", "MAINACCOUNT", any())).thenReturn(null);

        // Act
        AccountBalanceMgmtDTO result = mxMsgHandler.validateMessage(
            "ENTITY_TYPE", tag72, "BLOCK1LT", currencyCode, valueDt, sendersRef, messageType, amount, acctNum, eamByBic
        );

        // Assert
        assertEquals("No definition is found for Entity Type, Currency code or Account Type.", result.getMessageForUI());
        assertNull(result.getEntityIdentifier());
    }

    @Test
    public void testValidateMessage_PastValueDate() {
        // Arrange
        // ... (same as above, but with a past value date)
        valueDt = "2024-08-26";

        // Act
        AccountBalanceMgmtDTO result = mxMsgHandler.validateMessage(
            "ENTITY_TYPE", tag72, "BLOCK1LT", currencyCode, valueDt, sendersRef, messageType, amount, acctNum, eamByBic
        );

        // Assert
        assertEquals("Value Date is a past date. This processor allows only present and future dates.", result.getMessageForUI());
        assertNull(result.getEntityIdentifier());
    }

    @Test
    public void testValidateMessage_MessageAlreadyExists() {
        // Arrange
        // ... (same as above, but with an existing message)
        when(mgmtRepo.findByValueDateAndSendersRefAndMessageType(any(), any(), any())).thenReturn(Collections.singletonList(new AccountBalanceManagement()));

        // Act
        AccountBalanceMgmtDTO result = mxMsgHandler.validateMessage(
            "ENTITY_TYPE", tag72, "BLOCK1LT", currencyCode, valueDt, sendersRef, messageType, amount, acctNum, eamByBic
        );

        // Assert
        assertEquals("Message already exists.", result.getMessageForUI());
        assertNull(result.getEntityIdentifier());
    }

    // ... (add more test cases for different scenarios)
}
