package com.maybank.ilm.junit.swiftmsghandlers;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.dao.AccountBalanceMgmtRepo;
import com.maybank.ilm.core.dao.CashflowProjectionDao;
import com.maybank.ilm.core.dao.DimDao;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.dao.FinMessageDao;
import com.maybank.ilm.core.dao.LockConfigDao;
import com.maybank.ilm.core.swiftmsghandlers.MT103Handler;
import com.maybank.ilm.core.util.DateUtil;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.embeddable.Block4Tag50;
import com.maybank.ilm.embeddable.Block4Tag52;
import com.maybank.ilm.embeddable.Block4Tag53;
import com.maybank.ilm.embeddable.Block4Tag57;
import com.maybank.ilm.embeddable.Block4Tag72;
import com.maybank.ilm.embeddable.MT103Block4;
import com.maybank.ilm.embeddable.MTBlock1;
import com.maybank.ilm.embeddable.MTBlock2;
import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.DimCurrency;
import com.maybank.ilm.entity.EntityAccountMapDefinition;
import com.maybank.ilm.entity.FinMT103;
import com.maybank.ilm.junit.config.AbstractServiceTest;

public class MT103HandlerTest extends AbstractServiceTest {

    @InjectMocks
    MT103Handler mt103Handler;

    @Mock
    EntityAccountMappingRepo eamRepo;
    @Mock
    CashflowProjectionDao cfProjectionDao;
    @Mock
    AccountBalanceMgmtRepo mgmtRepo;
    @Mock
    DimDao dimDao;
    @Mock
    LockConfigDao lockConfigDao;
    @Mock
    FinMessageDao finMsgDao;

    @Before
    public void doSetup() {
        MockitoAnnotations.initMocks(this);
        doSetup(mt103Handler);
    }

    @Test
    public void saveToAcctBalMgmtAndMappingTest() {
        FinMT103 finMT103 = createSampleFinMT103();
        
        // Mock behaviors
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey(any(), any(), any())).thenReturn(new EntityAccountMapDefinition());
        when(dimDao.getCurrDetailsByCode(any())).thenReturn(new DimCurrency());
        when(lockConfigDao.updateLockConfig(any(), any())).thenReturn(1);
        when(mgmtRepo.saveAll(any())).thenReturn(new ArrayList<>());
        doNothing().when(finMsgDao).saveAny(any());

        mt103Handler.saveToAcctBalMgmtAndMapping(finMT103);

        // Add assertions to verify the interactions and state
        // Example: verify that saveAll was called on mgmtRepo
        verify(mgmtRepo, times(1)).saveAll(any());
    }

    @Test
    public void saveToAcctBalMgmtAndMappingTest2() {
        FinMT103 finMT103 = createSampleFinMT103();

        // Mock behaviors
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey(any(), any(), any())).thenReturn(new EntityAccountMapDefinition());
        when(mgmtRepo.findByValueDateAndEntityAcctMapSkeyAndMessageTypeIn(any(), any(), any())).thenReturn(createSampleAccountBalanceManagement());

        mt103Handler.saveToAcctBalMgmtAndMapping(finMT103);

        // Add assertions to verify the interactions and state
        // Example: verify that saveAll was called on mgmtRepo
        verify(mgmtRepo, times(1)).saveAll(any());
    }

    @Test
    public void getMessageTypeTest() {
        String messageType = mt103Handler.getMessageType();
        assertEquals(ILMCoreConstants.MESSAGETYPE103, messageType);
    }

    @Test
    public void validateMessageTest() {
        FinMT103 finMT103 = createSampleFinMT103();
        
        // Example of validating message
        AccountBalanceMgmtDTO result = mt103Handler.validateMessage(finMT103);

        // Add assertions to verify the result
        assertNotNull(result);
    }

    @Test
    public void blockMT103MsgOTypeCreditMsgTest() throws Exception {
        FinMT103 finMT103 = createSampleFinMT103();

        // Access the private method via reflection
        Method method = MT103Handler.class.getDeclaredMethod("blockMT103MsgOTypeCreditMsg", FinMT103.class);
        method.setAccessible(true);
        
        method.invoke(mt103Handler, finMT103);

        // Add assertions to verify the behavior
    }

    @Test
    public void blockMT103MsgITypeCreditMsgTest() throws Exception {
        FinMT103 finMT103 = createSampleFinMT103();

        // Access the private method via reflection
        Method method = MT103Handler.class.getDeclaredMethod("blockMT103MsgITypeCreditMsg", FinMT103.class);
        method.setAccessible(true);
        
        method.invoke(mt103Handler, finMT103);

        // Add assertions to verify the behavior
    }

    private FinMT103 createSampleFinMT103() {
        FinMT103 finMT103 = new FinMT103();
        MT103Block4 block4 = new MT103Block4();
        block4.setBlock4Tag32aDate(DateUtil.getStringFromLDate(LocalDate.now(), "yyMMdd"));
        block4.setBlock4Tag32aSettledAmnt(BigDecimal.ZERO);
        block4.setBlock4Tag32aCurrency(ILMCoreConstants.MYR);
        block4.setBlock4Tag20("block4tag20");
        finMT103.setBlock4(block4);

        MTBlock1 block1 = new MTBlock1();
        block1.setBlock1LogicalTerminal("Block1LT");
        finMT103.setBlock1(block1);

        MTBlock2 block2 = new MTBlock2();
        block2.setBlock2InOutInd(ILMCoreConstants.INPUTIND);
        finMT103.setBlock2(block2);

        Block4Tag57 tags57 = new Block4Tag57();
        tags57.setBlock4Tag57aBic("tag57Bic");
        finMT103.setTags57(tags57);

        Block4Tag52 tags52 = new Block4Tag52();
        tags52.setBlock4Tag52aBic("tag52Bic");
        finMT103.setTags52(tags52);

        Block4Tag50 tag50 = new Block4Tag50();
        tag50.setBlock4Tag50aBic("tag50Bic");
        finMT103.setTags50(tag50);

        Block4Tag72 tag72 = new Block4Tag72();
        finMT103.setTags72(tag72);

        return finMT103;
    }

    private List<AccountBalanceManagement> createSampleAccountBalanceManagement() {
        List<AccountBalanceManagement> managements = new ArrayList<>();
        AccountBalanceManagement accountBalanceManagement = new AccountBalanceManagement();
        accountBalanceManagement.setEntityAcctMapSkey(1L);
        accountBalanceManagement.setCurrencyCode("MYR");
        accountBalanceManagement.setValueDate(LocalDate.now());
        accountBalanceManagement.setSendersRef("block4tag");
        accountBalanceManagement.setSettlementInd('Y');
        managements.add(accountBalanceManagement);
        return managements;
    }
}
