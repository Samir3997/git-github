package com.maybank.ilm.core.nostro.nostroapihandlers;

import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.maybank.ilm.core.dao.ConfigRepo;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.util.DateUtil;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.Nostro.NostroApiCommon;
import com.maybank.ilm.dto.Nostro.NostroBalanceDTO;
import com.maybank.ilm.dto.Nostro.NostroRequestDTO;
import com.maybank.ilm.dto.Nostro.NostroTransaction;
import com.maybank.ilm.dto.Nostro.bofadto.BOFAAccountTransactions;
import com.maybank.ilm.dto.Nostro.bofadto.BOFAApiResponseDTO;
import com.maybank.ilm.dto.Nostro.bofadto.BofaAccountBalancesDTO;
import com.maybank.ilm.dto.Nostro.bofadto.BofaBalances;
import com.maybank.ilm.dto.Nostro.bofadto.BofaErrorMsg;
import com.maybank.ilm.dto.Nostro.bofadto.BofaTransactions;

@Component
public class BofaApiRespHandler extends NostroApiAbstractImpl {
	@Autowired
	EntityAccountMappingRepo accountMappingRepo;

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private ConfigRepo configRepo;

	private static final Logger LOGGER = LogManager.getLogger(BofaApiRespHandler.class);

	@Override
	public List<NostroApiCommon> nostroApiService(NostroRequestDTO apiDTO) {
		LOGGER.info("==========BofaApiRespHandler============" + apiDTO.getReportType());
		HttpHeaders headers = getHeaders();
		String fromDate = apiDTO.getFromDate().toString();
		String toDate = apiDTO.getToDate().toString();
		String transactionsApi = "";
		String authTokenUrl = configRepo.getConfigByShortCode(ILMCoreConstants.BOFA_AUTH_TOKEN_URL, ILMCoreConstants.BOFA_AUTH_TOKEN_URL)
				.get(0).getValue().toString();
		HttpEntity<Object> tokenEntity = new HttpEntity<Object>(headers);
		ResponseEntity<String> authToken = restTemplate.exchange(authTokenUrl, HttpMethod.POST, tokenEntity,
				String.class);
		try {
			JSONObject tokenObject = new JSONObject(authToken.getBody());
			headers.set("Authorization" , "Bearer " + tokenObject.getString("access_token"));
		} catch (Exception e) {
			System.out.println("Token_Exception "+e.getMessage());
		}
		System.out.println(headers.get("Authorization"));
		String bofaAcctNo = configRepo.getConfigByShortCode("BOFA_ACCOUNTNO", ILMCoreConstants.BOFA_ACCOUNTNO).get(0)
				.getValue().toString();
		String bankID = configRepo.getConfigByShortCode("BOFA_BANKID", ILMCoreConstants.BOFA_BANKID).get(0).getValue()
				.toString();
		
		String transactionBody = "{\r\n" + " \"accounts\": [\r\n" + "  {\r\n" + "   \"accountNumber\":" + "\""
				+ bofaAcctNo + "\"" + ",\r\n" + "   \"bankId\":" + "\"" + bankID + "\"" + "\r\n" + "  }\r\n" + " ],\r\n"
				+ " \"fromDate\":" + "\"" + fromDate + "\"" + ",\r\n" + " \"toDate\":" + "\"" + toDate + "\"" + "\r\n"
				+ "}";
		
		if(apiDTO.getReportType().compareTo(ILMCoreConstants.INTRA_DAY) == 0) {
			transactionsApi = configRepo.getConfigByShortCode("BOFA_API", ILMCoreConstants.BOFA_TRANSACTION_API_SD)
					.get(0).getValue().toString();
		}else {
			transactionsApi = configRepo.getConfigByShortCode("BOFA_API", ILMCoreConstants.BOFA_TRANSACTION_API_PP)
					.get(0).getValue().toString();
		}
		

		List<NostroApiCommon> listNostroApiCommon = new ArrayList<>();
		BOFAApiResponseDTO bofaTransApiResponseDTO = null;
		try {
			
			HttpEntity<Object> transactionEntity = new HttpEntity<Object>(transactionBody, headers);
			ResponseEntity<String> transactionResponse = restTemplate.exchange(transactionsApi, HttpMethod.POST,
					transactionEntity, String.class);

			// Transaction API conversion starts
			ObjectMapper objectMapper = new ObjectMapper();
			bofaTransApiResponseDTO = objectMapper.readValue(transactionResponse.getBody(), new TypeReference<BOFAApiResponseDTO>() {
			});
			NostroApiCommon nostroApiCommon = new NostroApiCommon();
			List<NostroTransaction> listNostroTransaction = new ArrayList<>();
			List<NostroBalanceDTO> balanceList = new ArrayList<>();
			List<BOFAAccountTransactions> bofaAccountTransactions = bofaTransApiResponseDTO.getAccountTransactions();
			if(CollectionUtils.isNotEmpty(bofaAccountTransactions)) {
				List<BofaTransactions> bofaList = bofaAccountTransactions.get(0).getTransactions();
				if(CollectionUtils.isNotEmpty(bofaList)) {
					Map<String, BigDecimal> openingbalMap = new HashMap<>();
					Map<String, BigDecimal> closingbalMap = new HashMap<>();
					for (BofaTransactions transaction : bofaList) {
						if(transaction.getTransactionType().compareToIgnoreCase(ILMCoreConstants.BOFA_TRANSACTION_TYPE_DETAIL) == 0) {
							NostroTransaction nostroTrans = new NostroTransaction();
							nostroTrans.setDateOfTransaction(transaction.getValueDate());
							nostroTrans.setTransactionType(transaction.getCreditDebitIndicator());
							nostroTrans.setTotalAmount(transaction.getAmount());
							nostroTrans.setTransactionRemarks(transaction.getTransactionDescription());
							nostroTrans.setCurrency(bofaAccountTransactions.get(0).getCurrency());
							listNostroTransaction.add(nostroTrans);
						}else {
							if(transaction.getTransactionCode().compareToIgnoreCase(ILMCoreConstants.BOFA_OPENINGBAL_TRNCODE) == 0){
								openingbalMap.put(transaction.getValueDate(), transaction.getAmount());
							}else if(transaction.getTransactionCode().compareToIgnoreCase(ILMCoreConstants.BOFA_CLOSINGBAL_TRNCODE) == 0) {
								closingbalMap.put(transaction.getValueDate(), transaction.getAmount());
							}
						}
						
					}
					if(!closingbalMap.isEmpty()) {
						for (Map.Entry<String, BigDecimal> entry : closingbalMap.entrySet()) {
							NostroBalanceDTO balanceDTO = new NostroBalanceDTO();
							balanceDTO.setAsOfDate(entry.getKey());
							balanceDTO.setOpeningBalance(openingbalMap.get(entry.getKey()));
							balanceDTO.setRunningBalance(entry.getValue());
							balanceList.add(balanceDTO);
						}
					}
				}
			}
			nostroApiCommon.setNostroBalanceDTO(balanceList);
			nostroApiCommon.setNostroTransactionDTO(listNostroTransaction);				
			listNostroApiCommon.add(nostroApiCommon);
		}catch(HttpClientErrorException exception) {
			ObjectMapper errorMapper = new ObjectMapper();
			BofaErrorMsg bofaErrorMsg = new BofaErrorMsg();
			NostroApiCommon nostroApiCommon = new NostroApiCommon();
			try {
				bofaErrorMsg = errorMapper.readValue(exception.getResponseBodyAsString(), new TypeReference<BofaErrorMsg>() {});
				nostroApiCommon.setErrorMsg(bofaErrorMsg.getErrorDesc().get(0).getDescription());
				listNostroApiCommon.add(nostroApiCommon);
			} catch (Exception e) {
				LOGGER.info("BofaErrorApiRespHandler's Catch : ", e);
			}
		}catch (Exception e) {
			LOGGER.info("BofaApiRespHandler's Catch : ", e);
		}
		return listNostroApiCommon;
	}

	@Override
	public String getNostroApiType() {
		return ILMCoreConstants.BANK_OF_AMERICA_NY;
	}
}
















package com.maybank.ilm.core.dao;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.maybank.ilm.entity.Config;


public interface ConfigRepo extends JpaRepository<Config, Long> {

	@Query("SELECT cf FROM Config cf where cf.configType =:configEntry")
	public List<Config> getConfigvalues(String configEntry);
	
	@Query("DELETE  FROM Config cf where cf.configId =:configId")
	public void delConfig(Long configId);

	public Config saveAndFlush(Config config);

	@Transactional
	public void deleteByConfigId(Long configId);
	
	@Query("SELECT cf FROM Config cf where cf.configType =:configEntry and cf.shortCode like :shortCode ")
	public List<Config> getConfigByShortCode(String configEntry,String shortCode);

}






package com.maybank.ilm.core.dao;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.maybank.ilm.entity.EntityAccountMapDefinition;

public interface EntityAccountMappingRepo extends JpaRepository<EntityAccountMapDefinition, Long> {

	public List<EntityAccountMapDefinition> findByEntitySkeyAndAccountType(Long entitySkey, String accountType);
	public List<EntityAccountMapDefinition> findByEntitySkeyAndCurrencySkeyAndAccountType(Long entitySkey,Long currencySkey,String accountType);
	public EntityAccountMapDefinition findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey(String entityIdentifier, String accountType, Long currencySkey);
	public List<EntityAccountMapDefinition> findByAccountType(String accountType);
	public EntityAccountMapDefinition findFirstByEntitySkey(Long entitySkey);
	public List<EntityAccountMapDefinition> findByEntitySkeyAndCountrySkeyAndCurrencySkey(Long entitySkey, Long countrySkey, Long currencySkey);
	public List<EntityAccountMapDefinition> getDefnByNostroInd(Character nostroInd);
	public List<EntityAccountMapDefinition> findByEntityAcctMapSkey(Long entityAcctMapSkey);
	public List<EntityAccountMapDefinition> findByEntityIdentifier(String bic);
	@Query("SELECT dic.currencyCode FROM DimCurrency dic WHERE dic.countrySkey IN(SELECT DISTINCT eam.countrySkey FROM EntityAccountMapDefinition eam WHERE eam.entityIdentifier = :entityIdentifier AND eam.nostroInd = :nostroInd)")
	public String findCurrencyCodeByEntityIdentifier(final String entityIdentifier, final Character nostroInd);

	@Query("SELECT dc.countryCode FROM DimCountry dc WHERE dc.countrySkey IN(SELECT DISTINCT eam.countrySkey FROM EntityAccountMapDefinition eam WHERE eam.entityIdentifier = :entityIdentifier AND eam.nostroInd = :nostroInd)")
	public String findCountryCodeByEntityIdentifier(final String entityIdentifier, final Character nostroInd);

	public Optional<EntityAccountMapDefinition> findFirstByCountrySkeyAndEntitySkeyAndCurrencySkeyAndAccountType(Long countrySkey, Long entitySkey, Long currencySkey, String accountType);
	public EntityAccountMapDefinition findByCountrySkeyAndEntitySkeyAndCurrencySkeyAndNostroBankName(Long countrySkey, Long entitySkey, Long currencySkey, String nostroAgent);
	public List <EntityAccountMapDefinition> findByCountrySkeyAndEntitySkeyAndCurrencySkeyAndAccountType(Long countrySkey, Long entitySkey, Long currencySkey, String accountType);
	public EntityAccountMapDefinition findByAccountNumber(String accountNumber);
	
}















