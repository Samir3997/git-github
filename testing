package com.maybank.ilm.core.swiftmsghandlers;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.jparams.object.builder.utils.ObjectUtils;
import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.util.DateUtil;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.AccountBalanceMgmtDTO;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.EntityAccountMapDefinition;
import com.maybank.ilm.entity.FinMT103;

@Component
public class MT103Handler extends SwiftMsgHandlerAbstractImpl {
	private static final Logger LOGGER = LogManager.getLogger(MT103Handler.class);

	@Autowired
	EntityAccountMappingRepo eamRepo;

	@Override
	public <T> void saveToAcctBalMgmtAndMapping(T t) {
		FinMT103 finMT103 = (FinMT103) t;
		List<AccountBalanceManagement> allEntries = new ArrayList<>();
		List<AccountBalanceAggregation> aggregations = new ArrayList<>();
		Long trackerId = finMT103.getTrackerID();
		LocalDate valueDt = DateUtil.getDateFromString(finMT103.getBlock4().getBlock4Tag32aDate());
		LocalDateTime businessDt = getCurrentDateTimeByZone();
		BigDecimal amount = finMT103.getBlock4().getBlock4Tag32aSettledAmnt();
		String senderBic = finMT103.getTags52().getBlock4Tag52aBic();
		String receiverBic = finMT103.getTags57().getBlock4Tag57aBic();
		String currencyCode = finMT103.getBlock4().getBlock4Tag32aCurrency();
		String receiverEntity = null;

		if (currencyCode.equals(ILMCoreConstants.MYR)) {
			if (finMT103.getBlock2().getBlock2InOutInd().contentEquals(ILMCoreConstants.OUTPUTIND)) {
				LOGGER.info("Inside handler for MYR and O indicator.");
				EntityAccountMapDefinition eamDefn = findEamDefn(receiverBic, finMT103.getTags72(),
						finMT103.getBlock1().getBlock1LogicalTerminal(), currencyCode, ILMCoreConstants.MAINACCOUNT);
				if (eamDefn != null) {
					receiverEntity = eamDefn.getEntityIdentifier();
					Long entityAcctMapSkey = eamDefn.getEntityAcctMapSkey();
					AccountBalanceManagement management = setBalanceManagement(entityAcctMapSkey, amount,
							ILMCoreConstants.PLUS, trackerId, businessDt, valueDt, null,
							finMT103.getBlock2MessageType(), finMT103.getTags52().getBlock4Tag52aBic(), receiverEntity,
							getTRNCode(getNarratives(finMT103.getTags72())), finMT103.getBlock4().getBlock4Tag20(),
							currencyCode, ILMCoreConstants.NIND);
					allEntries.add(management);
					String aggrInd = ILMCoreConstants.OTHERS;
					getAggregations(allEntries, aggregations, aggrInd);
					saveEntities(allEntries, finMT103);
				} else {
					LOGGER.info("Entity defination not found for {} {} {} ", receiverEntity,
							ILMCoreConstants.MAINACCOUNT, currencyCode);
					throwEntityNotFountException();
				}
			}
		} else {
		
			if (finMT103.getBlock2().getBlock2InOutInd().contentEquals(ILMCoreConstants.INPUTIND)) {
				if(blockMT103MsgITypeDebitMsg(finMT103, currencyCode)) {
					LOGGER.info("Message is blocked");
					throwMsgBlockedException();
				};
				LOGGER.info("Inside MT103 handler for Nostro {} and I indicator.", currencyCode);
				String deductFromBIC = (finMT103.getBlock2().getBlock2ReceiverAddr()).substring(0, 8);
				String deductFromBICAlt = finMT103.getTags53().getBlock4Tag53aBic();
				if (deductFromBICAlt != null) {
					deductFromBICAlt = deductFromBICAlt.substring(0, 8);
				}

				EntityAccountMapDefinition deductFromEAM = null;
				deductFromEAM = getDefnByEntityIDAndAcctType(deductFromBIC, ILMCoreConstants.NOSTROACCOUNT, currencyCode);

				if (Objects.isNull(deductFromEAM)) {
					deductFromEAM = getDefnByEntityIDAndAcctType(deductFromBICAlt, ILMCoreConstants.NOSTROACCOUNT, currencyCode);
				}
				
				if (Objects.isNull(deductFromEAM)) {
					LOGGER.info("Entity defination not found for {} {} {} {} ", deductFromBIC, deductFromBICAlt,
							ILMCoreConstants.NOSTROACCOUNT, currencyCode);
					throwEntityNotFountException();
				}
				/*check related Ref */
				String relatedRef =finMT103.getBlock4().getBlock4Tag20();
				Character settled = ILMCoreConstants.NIND;
				if(checkRelatedRefForNostro(valueDt, deductFromEAM.getEntityAcctMapSkey(), relatedRef)) {
					settled = ILMCoreConstants.YIND;
				}
				
				senderBic = (finMT103.getBlock1().getBlock1LogicalTerminal()).substring(0, 8);
				
				receiverBic = finMT103.getTags57().getBlock4Tag57aBic();
				if(receiverBic == null) {
					receiverBic = finMT103.getTags57().getBlock4Tag57dAcct();
				}
				receiverBic = receiverBic != null ? (receiverBic).substring(0, 8) : receiverBic;

				try {
					allEntries.add(setBalanceManagementWithSettlementInd(deductFromEAM.getEntityAcctMapSkey(), amount,
							ILMCoreConstants.negativeSign, finMT103.getTrackerID(), businessDt, valueDt, null,
							finMT103.getBlock2MessageType(), senderBic, receiverBic, null,
							finMT103.getBlock4().getBlock4Tag20(), currencyCode, ILMCoreConstants.NIND ,settled));
				} catch(Exception e){
					LOGGER.info("Exception occured In creating management entry: " + e);
				}

			} else {
				LOGGER.info("Inside MT 103 handler for Nostro {} and O indicator.", currencyCode);
				if(blockMT103MsgOTypeCreditMsg(finMT103, currencyCode)) {
					LOGGER.info("Message is blocked");
					throwMsgBlockedException();
				};
				String creditToBIC = (finMT103.getBlock2().getBlock2MIRLogicalTerminal()).substring(0, 8);
				String creditToBICAlt = finMT103.getTags54().getBlock4Tag54aBic();
				String tag53aBic = finMT103.getTags53().getBlock4Tag53aBic() != null ? 
						finMT103.getTags53().getBlock4Tag53aBic().substring(0,8) : null;
				creditToBICAlt = creditToBICAlt != null ? creditToBICAlt.substring(0, 8) : creditToBICAlt;

				EntityAccountMapDefinition creditToEAM = null;
				creditToEAM = getDefnByEntityIDAndAcctType(creditToBICAlt, ILMCoreConstants.NOSTROACCOUNT, currencyCode);
				
				if (Objects.isNull(creditToEAM)) {
					creditToEAM = getDefnByEntityIDAndAcctType(tag53aBic, ILMCoreConstants.NOSTROACCOUNT, currencyCode);
				}
				
				if (Objects.isNull(creditToEAM)) {
					creditToEAM = getDefnByEntityIDAndAcctType(creditToBIC, ILMCoreConstants.NOSTROACCOUNT, currencyCode);
				}

				if (Objects.isNull(creditToEAM)) {
					LOGGER.info("Entity defination not found for {} {} {} {} ", creditToBIC, creditToBICAlt,
							ILMCoreConstants.NOSTROACCOUNT, currencyCode);
					throwEntityNotFountException();
				}
				
				/*check related Ref */
				String relatedRef =finMT103.getBlock4().getBlock4Tag20();
				Character settled = ILMCoreConstants.NIND;
				if(checkRelatedRefForNostro(valueDt, creditToEAM.getEntityAcctMapSkey(), relatedRef)) {
					settled = ILMCoreConstants.YIND;
				}
				
				receiverBic = (finMT103.getBlock1().getBlock1LogicalTerminal()).substring(0, 8);
				//Sender Bic to show on ui - Maybe Changed Later
				senderBic = (creditToBIC != null ? creditToBIC : creditToBICAlt);
				
//				if (senderBic == null) {
//					senderBic = finMT103.getTags53().getBlock4Tag53aBic();
//				}
				try {
					allEntries.add(setBalanceManagementWithSettlementInd(creditToEAM.getEntityAcctMapSkey(), amount,
							ILMCoreConstants.plusSign, finMT103.getTrackerID(), businessDt, valueDt, null,
							finMT103.getBlock2MessageType(), senderBic, receiverBic, null,
							finMT103.getBlock4().getBlock4Tag20(), currencyCode, ILMCoreConstants.NIND ,settled));
				} catch(Exception e){
					LOGGER.info("Exception occured In creating management entry: " + e);

			}
		}
		}
		//String aggrInd = ILMCoreConstants.OTHERS;
		//getAggregations(allEntries, aggregations, aggrInd);
		saveEntities(allEntries, finMT103);
	}
	
	
	private Boolean blockMT103MsgOTypeCreditMsg(FinMT103 finMT103, String currencyCode) {
		LOGGER.info("Inside block msg method");
		Boolean blockMsg = false;
		String tag59AcctNo = finMT103.getTags59().getBlock4Tag59Acct();
		String tag59aAcctNo = finMT103.getTags59().getBlock4Tag59aAcct();
		String tag59FAcctNo = finMT103.getTags59().getBlock4Tag59fAcct();
		String tag59aBic = finMT103.getTags59().getBlock4Tag59aBic();
		String tag59FInfo = finMT103.getTags59().getBlock4Tag59fNumber1();
		String tag59Info = finMT103.getTags59().getBlock4Tag59NameAddr();
		if (tag59aAcctNo != null && tag59aBic != null) {
			EntityAccountMapDefinition eamDefnByTag59A = getEntityAcctMapDefnByAcctNum(tag59aAcctNo, currencyCode);
			if (eamDefnByTag59A != null && tag59aBic.substring(0, 8).compareToIgnoreCase("MBBEMYKL") == 0) {
				blockMsg = true;
			}
		} else if (tag59FAcctNo != null && tag59FInfo != null) {
			EntityAccountMapDefinition eamDefnByTag59F = getEntityAcctMapDefnByAcctNum(tag59FAcctNo, currencyCode);
			if (eamDefnByTag59F != null
					&& (tag59FInfo.toUpperCase().contains("MALAYAN BANKING BERHAD") || tag59FInfo.toUpperCase().contains("MAYBANK"))) {
				blockMsg = true;
			}
		} else if (tag59AcctNo != null && tag59Info != null) {
			EntityAccountMapDefinition eamDefnByTag59 = getEntityAcctMapDefnByAcctNum(tag59AcctNo, currencyCode);
			if (eamDefnByTag59 != null
					&& (tag59Info.toUpperCase().contains("MALAYAN BANKING BERHAD") || tag59Info.toUpperCase().contains("MAYBANK"))) {
				blockMsg = true;
			}
		}
		return blockMsg;
	}
	
	private Boolean blockMT103MsgITypeDebitMsg(FinMT103 finMT103, String currencyCode) {
		LOGGER.info("Inside block msg method");
		Boolean blockMsg = false;
		String tag50aBic = finMT103.getTags50().getBlock4Tag50aBic();
		if (tag50aBic != null) {
			blockMsg = tag50aBic.substring(0, 8).compareToIgnoreCase("MBEAMYKL") == 0 || 
					tag50aBic.substring(0, 8).compareToIgnoreCase("MBEAMY21") == 0;
		} 
		return blockMsg;
	}


	@Override
	public String getMessageType() {
		return ILMCoreConstants.MESSAGETYPE103;
	}

	@Override
	public <T> AccountBalanceMgmtDTO validateMessage(T t) {
		FinMT103 finMT103 = (FinMT103) t;
		return super.validateMessage(finMT103.getTags57().getBlock4Tag57aBic(), finMT103.getTags72(),
				finMT103.getBlock1().getBlock1LogicalTerminal(), finMT103.getBlock4().getBlock4Tag32aCurrency(),
				finMT103.getBlock4().getBlock4Tag32aDate(), finMT103.getBlock4().getBlock4Tag20(),
				ILMCoreConstants.MESSAGETYPE103, finMT103.getBlock4().getBlock4Tag32aSettledAmnt(), null, Boolean.TRUE);
	}
}
