package com.maybank.ilm.junit.swiftmsghandlers;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.maybank.ilm.core.dao.EntityAccountMappingRepo;
import com.maybank.ilm.core.util.DateUtil;
import com.maybank.ilm.core.util.ILMCoreConstants;
import com.maybank.ilm.dto.AccountBalanceMgmtDTO;
import com.maybank.ilm.entity.AccountBalanceManagement;
import com.maybank.ilm.entity.EntityAccountMapDefinition;
import com.maybank.ilm.entity.FinMT103;
import com.maybank.ilm.core.swiftmsghandlers.MT103Handler;

public class MT103HandlerTest {

    @InjectMocks
    MT103Handler mt103Handler;

    @Mock
    EntityAccountMappingRepo eamRepo;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void saveToAcctBalMgmtAndMappingTest() {
        FinMT103 finMT103 = createSampleFinMT103();

        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey(any(), any(), any()))
            .thenReturn(new EntityAccountMapDefinition());
        when(eamRepo.findByValueDateAndEntityAcctMapSkeyAndMessageTypeIn(any(), any(), any()))
            .thenReturn(createSampleAccountBalanceManagement());

        mt103Handler.saveToAcctBalMgmtAndMapping(finMT103);

        // Add assertions and verifications
        verify(eamRepo, times(1)).saveAll(any());
    }

    @Test
    public void getMessageTypeTest() {
        String messageType = mt103Handler.getMessageType();
        assertEquals(ILMCoreConstants.MESSAGETYPE103, messageType);
    }

    @Test
    public void validateMessageTest() {
        FinMT103 finMT103 = createSampleFinMT103();
        AccountBalanceMgmtDTO result = mt103Handler.validateMessage(finMT103);

        assertNotNull(result);
        // Add more specific assertions based on your expected result
    }

    @Test
    public void blockMT103MsgOTypeCreditMsgTest() throws Exception {
        FinMT103 finMT103 = createSampleFinMT103();

        Method method = MT103Handler.class.getDeclaredMethod("blockMT103MsgOTypeCreditMsg", FinMT103.class);
        method.setAccessible(true);

        Boolean result = (Boolean) method.invoke(mt103Handler, finMT103);

        assertNotNull(result);
        // Add specific assertions based on expected behavior
    }

    @Test
    public void blockMT103MsgITypeDebitMsgTest() throws Exception {
        FinMT103 finMT103 = createSampleFinMT103();

        Method method = MT103Handler.class.getDeclaredMethod("blockMT103MsgITypeDebitMsg", FinMT103.class);
        method.setAccessible(true);

        Boolean result = (Boolean) method.invoke(mt103Handler, finMT103);

        assertNotNull(result);
        // Add specific assertions based on expected behavior
    }

    private FinMT103 createSampleFinMT103() {
        FinMT103 finMT103 = new FinMT103();
        // Set sample data for FinMT103 instance
        // Example:
        finMT103.setBlock4(createSampleMT103Block4());
        finMT103.setTags52(createSampleBlock4Tag52());
        finMT103.setTags57(createSampleBlock4Tag57());
        // Add more fields if necessary
        return finMT103;
    }

    private MT103Block4 createSampleMT103Block4() {
        MT103Block4 block4 = new MT103Block4();
        block4.setBlock4Tag32aDate(DateUtil.getStringFromLDate(LocalDate.now(), "yyMMdd"));
        block4.setBlock4Tag32aSettledAmnt(BigDecimal.ZERO);
        block4.setBlock4Tag32aCurrency(ILMCoreConstants.MYR);
        block4.setBlock4Tag20("block4tag20");
        return block4;
    }

    private Block4Tag52 createSampleBlock4Tag52() {
        Block4Tag52 tag52 = new Block4Tag52();
        tag52.setBlock4Tag52aBic("tag52Bic");
        return tag52;
    }

    private Block4Tag57 createSampleBlock4Tag57() {
        Block4Tag57 tag57 = new Block4Tag57();
        tag57.setBlock4Tag57aBic("tag57Bic");
        return tag57;
    }

    private List<AccountBalanceManagement> createSampleAccountBalanceManagement() {
        List<AccountBalanceManagement> managements = new ArrayList<>();
        AccountBalanceManagement management = new AccountBalanceManagement();
        management.setEntityAcctMapSkey(1L);
        management.setCurrencyCode("MYR");
        management.setValueDate(LocalDate.now());
        management.setSendersRef("block4tag");
        management.setSettlementInd('Y');
        managements.add(management);
        return managements;
    }
}
