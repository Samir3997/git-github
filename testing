http://10.172.120.19:8013/ilm-web/kacctanalydata

{"analysisInd":"P","countrySkeys":[1],"currencySkeys":[1],"entitySkeys":[1],"entityName":"Conventional","fromDate":"01-11-2024","toDate":"04-11-2024","createdBy":"00142397"}

{
    "timeSpendsInSeconds": 1,
    "status": "SUCCESS",
    "serviceName": "getKAcctAnalyticsData",
    "t": [
        {
            "effectiveDate": "01-11-2024",
            "amntUtilized": 0,
            "trancheSize": 5000000,
            "costPerTranche": 12,
            "utilizationTime": null,
            "trancheUtilized": 0,
            "billedAmnt": 0,
            "amntRedeemed": null,
            "redemptionTime": null,
            "trancheRedeemed": null,
            "availCollateralBal": 26356554238.69,
            "excessSrr": 26356554238.69,
            "mt535Amount": null
        },
        {
            "effectiveDate": "02-11-2024",
            "amntUtilized": 0,
            "trancheSize": 5000000,
            "costPerTranche": 12,
            "utilizationTime": null,
            "trancheUtilized": 0,
            "billedAmnt": 0,
            "amntRedeemed": null,
            "redemptionTime": null,
            "trancheRedeemed": null,
            "availCollateralBal": null,
            "excessSrr": null,
            "mt535Amount": null
        },
        {
            "effectiveDate": "03-11-2024",
            "amntUtilized": 0,
            "trancheSize": 5000000,
            "costPerTranche": 12,
            "utilizationTime": null,
            "trancheUtilized": 0,
            "billedAmnt": 0,
            "amntRedeemed": null,
            "redemptionTime": null,
            "trancheRedeemed": null,
            "availCollateralBal": null,
            "excessSrr": null,
            "mt535Amount": null
        },
        {
            "effectiveDate": "04-11-2024",
            "amntUtilized": 0,
            "trancheSize": 5000000,
            "costPerTranche": 12,
            "utilizationTime": null,
            "trancheUtilized": 0,
            "billedAmnt": 0,
            "amntRedeemed": null,
            "redemptionTime": null,
            "trancheRedeemed": null,
            "availCollateralBal": 26356554238.69,
            "excessSrr": 26356554238.69,
            "mt535Amount": null
        }
    ]
}







@Controller
@RequestMapping("/")
public class KAccountAnalyticsController {
@RequestMapping(value="/kacctanalydata", method=RequestMethod.POST)
	@ResponseBody
	@CrossOrigin("${cors.urls}")
	public ResponseEntity<CommonResponseEntity<List<KAccountAnalyticsDataDTO>>> getKAcctAnalyticsData(@RequestBody RequestAnalyticsDTO filterDTO) {
		LOGGER.info("KAccountAnalyticsController {} getKAcctAnalyticsData");
		List<KAccountAnalyticsDataDTO> dataDtos = analyticsService.getKAcctAnalyticsData(filterDTO);
		return new ResponseEntity<>(new CommonResponseEntity<List<KAccountAnalyticsDataDTO>>(1l, "SUCCESS", "getKAcctAnalyticsData", dataDtos),HttpStatus.OK);
	}
}

public interface KAccountAnalyticsService {

	public List<KAccountAnalyticsDataDTO> getKAcctAnalyticsData(RequestAnalyticsDTO filterDTO);
}

@Service
public class KAccountAnalyticsServiceImpl implements KAccountAnalyticsService{

	@Override
	@Find(arguments= {"request Analytics DTO"},returnType="List of K Account Analytics DTO",type="JSON",comment="k_account_analytics")
	@FindNormEx
	public List<KAccountAnalyticsDataDTO> getKAcctAnalyticsData(RequestAnalyticsDTO filterDTO){
		System.out.println("Inside getKacctAnalyticsData");
		List<EntityAccountMapDefinition> kAcctEam = eamRepo.findByEntitySkeyAndAccountType(filterDTO.getEntitySkeys().get(0), ILMCoreConstants.KACCOUNT);
		List<EntityAccountMapDefinition> srrAcctEam = eamRepo.findByEntitySkeyAndAccountType(filterDTO.getEntitySkeys().get(0), ILMCoreConstants.SRRACCOUNT);
		List<KAccountAnalyticsDataDTO> dataDtos = new ArrayList<>();
		if(CollectionUtils.isNotEmpty(kAcctEam)) {
			LOGGER.info("Inside if ");
			Long eamSkey = kAcctEam.get(0).getEntityAcctMapSkey();
			Long srrEamSkey = null ;
			LOGGER.info("srrAcctEam " + srrAcctEam.toString());
			if (CollectionUtils.isNotEmpty(srrAcctEam)) {
				LOGGER.info("srrAcctEam is not empty ");
				srrEamSkey = srrAcctEam.get(0).getEntityAcctMapSkey();
				LOGGER.info("Srr eam skey : "+srrEamSkey);
			}
			LOGGER.info("eamSkey : "+eamSkey);
			if(eamSkey != null) {
				if(filterDTO.getAnalysisInd() == 'I') {
					dataDtos = getKAcctAnalyticsForIntraDay(filterDTO, eamSkey);
				}else if(filterDTO.getAnalysisInd() == 'P'){
					dataDtos = getKAcctAnalyticsForPastPeriod(filterDTO, eamSkey , srrEamSkey);
				}
			}
		}
		return dataDtos;
	}
}


public interface EntityAccountMappingRepo extends JpaRepository<EntityAccountMapDefinition, Long> {

	public List<EntityAccountMapDefinition> findByEntitySkeyAndAccountType(Long entitySkey, String accountType);
}


private List<KAccountAnalyticsDataDTO> getKAcctAnalyticsForIntraDay(RequestAnalyticsDTO filterDTO, Long eamSkey) {
		List<KAccountAnalyticsDataDTO> dataDTOs = new ArrayList<>();
		LocalDate analysisDate = filterDTO.getFromDate();
		KAccountConfiguration reqConfig = null;
		List<AccountBalanceManagement> balanceManagements = acctBalMgmtRepo.findByValueDateAndEntityAcctMapSkey(analysisDate, eamSkey);
		List<AccountBalanceManagement> filteredBalMgmts = balanceManagements.stream().filter(p -> (p.getMessageType().compareTo(ILMCoreConstants.MESSAGETYPE535) != 0)).collect(Collectors.toList());
		List<KAccountConfiguration> kAcctConfigs = kAcctConfigDao.getKAcctConfigByDims(filterDTO.getCountrySkeys(), filterDTO.getEntitySkeys(), filterDTO.getCurrencySkeys(), ILMCoreConstants.TRANCHEDEFN);
		if(CollectionUtils.isNotEmpty(kAcctConfigs)) {
			Optional<KAccountConfiguration> configurationOptional = kAcctConfigs.stream().filter(p -> (p.getEffectiveFrom().compareTo(analysisDate) <= 0 && p.getEffectiveTo().compareTo(analysisDate) >= 0)).findFirst();
			if(configurationOptional.isPresent()) {
				reqConfig = configurationOptional.get();
				for(AccountBalanceManagement balMgmt : filteredBalMgmts) {
					KAccountAnalyticsDataDTO analyticsDataDTO = new KAccountAnalyticsDataDTO();
					BigDecimal amount = balMgmt.getAmount();
					BigDecimal trancheUtilized = amount.divide(reqConfig.getTrancheSize(), 0, RoundingMode.HALF_UP);
					BigDecimal billedAmnt = trancheUtilized.multiply(reqConfig.getCostPerTranche());
					if(balMgmt.getAmountSign() != null && balMgmt.getAmountSign().contentEquals(ILMCoreConstants.PLUS)) {
						analyticsDataDTO.setAmntUtilized(amount);
						analyticsDataDTO.setUtilizationTime(DateUtil.getTimeFromTimeStamp(balMgmt.getBusinessDtTime()));
						analyticsDataDTO.setTrancheUtilized(trancheUtilized);
						analyticsDataDTO.setAmntRedeemed(BigDecimal.ZERO);
						analyticsDataDTO.setRedemptionTime("-");
						analyticsDataDTO.setTrancheRedeemed(BigDecimal.ZERO);
						analyticsDataDTO.setBilledAmnt(billedAmnt);
					}else if(balMgmt.getAmountSign() != null && balMgmt.getAmountSign().contentEquals(ILMCoreConstants.MINUS)){
						analyticsDataDTO.setAmntRedeemed(amount);
						analyticsDataDTO.setRedemptionTime(DateUtil.getTimeFromTimeStamp(balMgmt.getBusinessDtTime()));
						analyticsDataDTO.setTrancheRedeemed(trancheUtilized);
						analyticsDataDTO.setAmntUtilized(BigDecimal.ZERO);
						analyticsDataDTO.setUtilizationTime("-");
						analyticsDataDTO.setTrancheUtilized(BigDecimal.ZERO);
						analyticsDataDTO.setBilledAmnt(BigDecimal.ZERO);
					}
					
					analyticsDataDTO.setTrancheSize(reqConfig.getTrancheSize());
					analyticsDataDTO.setCostPerTranche(reqConfig.getCostPerTranche());
					dataDTOs.add(analyticsDataDTO);
				}
			}
		}
		return dataDTOs;	
	}

	
	private List<KAccountAnalyticsDataDTO> getKAcctAnalyticsForPastPeriod(RequestAnalyticsDTO filterDTO, Long eamSkey , Long srrEamSkey){
		LocalDate startDate = filterDTO.getFromDate();
		LocalDate endDate = filterDTO.getToDate();
		List<String> messageTypes=new ArrayList<String>();
		messageTypes.add(ILMCoreConstants.MESSAGETYPE535);
		List<KAccountAnalyticsDataDTO> dataDTOs = new ArrayList<>();
		int diffInDays = DateUtil.daysBetween(startDate, endDate);
		for(int index = 0; index <= diffInDays; index++) {
			BigDecimal amount = BigDecimal.ZERO;
			BigDecimal excessSrrAmount = BigDecimal.ZERO;
			BigDecimal availCollateralBal = BigDecimal.ZERO;
			LocalDate analysisDate = startDate.plusDays(index);
			List<AccountBalanceAggregation> aggregations = acctBalAggrRepo.findByValueDateAndEntityAcctMapSkeyOrderByBusinessDtTimeDesc(analysisDate, eamSkey);
			List<KAccountConfiguration> kAcctConfigs = kAcctConfigDao.getKAcctConfigByDims(filterDTO.getCountrySkeys(), filterDTO.getEntitySkeys(), filterDTO.getCurrencySkeys(), ILMCoreConstants.TRANCHEDEFN);
			amount=acctBalMgmtRepo.getTotalAmountByMessageTypeInAndEntityAcctMapSkeyAndValueDate(messageTypes, eamSkey, analysisDate);
			if(srrEamSkey != null) {
				excessSrrAmount=excessSrrAmountRepo.getExcessSrrAmount(srrEamSkey,analysisDate);
			}else {
				excessSrrAmount = null ;
			}
			if(DateUtil.isWeekend(analysisDate) || holidayRepo.findByHolidayDateAndCurrencySkey(analysisDate, filterDTO.getCurrencySkeys().get(0)).size() != 0) {
				excessSrrAmount = null ;
			}
			if(excessSrrAmount!= null && excessSrrAmount.compareTo(BigDecimal.ZERO) < 0) {
				excessSrrAmount = BigDecimal.ZERO ;
			}
			LOGGER.info(analysisDate);
			LOGGER.info("MT535 Amount : "+amount);
			LOGGER.info("excessSRRAmount : "+excessSrrAmount);
			if(amount!=null && excessSrrAmount!=null ) {
				availCollateralBal=amount.add(excessSrrAmount);
			}
			else if(amount == null && excessSrrAmount != null) {
				availCollateralBal = excessSrrAmount;
			}
			else if(amount != null && excessSrrAmount == null) {
				availCollateralBal = amount ;
			}
			else {
				availCollateralBal = null;
			}
			
			if(CollectionUtils.isNotEmpty(kAcctConfigs)) {
				Optional<KAccountConfiguration> configurationOptional = kAcctConfigs.stream().filter(p -> (p.getEffectiveFrom().compareTo(analysisDate) <= 0 && p.getEffectiveTo().compareTo(analysisDate) >= 0)).findFirst();
				if(configurationOptional.isPresent()) {
					KAccountConfiguration reqConfig = configurationOptional.get();
					if(CollectionUtils.isNotEmpty(aggregations)) {
						KAccountAnalyticsDataDTO analyticsDataDTO = new KAccountAnalyticsDataDTO();
						AccountBalanceAggregation balanceAggregation = aggregations.get(0);
						BigDecimal trancheUtilized = balanceAggregation.getTotalInFlowAmnt().abs().divide(reqConfig.getTrancheSize(),0, RoundingMode.HALF_UP);
						BigDecimal billedAmnt = trancheUtilized.multiply(reqConfig.getCostPerTranche());
						analyticsDataDTO.setAmntUtilized(balanceAggregation.getTotalInFlowAmnt().abs());
						analyticsDataDTO.setEffectiveDate(analysisDate);
						analyticsDataDTO.setTrancheSize(reqConfig.getTrancheSize());
						analyticsDataDTO.setCostPerTranche(reqConfig.getCostPerTranche());
						analyticsDataDTO.setTrancheUtilized(trancheUtilized);
						analyticsDataDTO.setBilledAmnt(billedAmnt);
						analyticsDataDTO.setAvailCollateralBal(availCollateralBal);
						analyticsDataDTO.setExcessSrr(excessSrrAmount);
						analyticsDataDTO.setMt535Amount(amount);
						dataDTOs.add(analyticsDataDTO);
					}
				}
			}
		}
		return dataDTOs;
	}
