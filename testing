@RunWith(MockitoJUnitRunner.class)
public class MXMsgHandlerAbstractImplTest {

    @Mock
    private EntityAccountMappingRepo eamRepo;

    @Mock
    private DimDao dimDao;

    @InjectMocks
    private MXMsgHandlerAbstractImpl mxMsgHandler;

    @Test
    public void testFindEamDefnByTag72_BicCodePresent() {
        // Arrange
        Block4Tag72 tag72 = new Block4Tag72();
        tag72.setBlock4Tag72Nar1("/CPRO/BNMAMYKL/CPRB/MBBEMYKL");
        String currencyCode = "USD";
        String accountName = "MAINACCOUNT";

        EntityAccountMapDefinition expectedDefinition = new EntityAccountMapDefinition();
        when(eamRepo.findFirstByEntityIdentifierAndAccountTypeAndCurrencySkey("MBBEMYKL", accountName, any())).thenReturn(expectedDefinition);

        // Act
        EntityAccountMapDefinition actualDefinition = mxMsgHandler.findEamDefnByTag72(tag72, currencyCode, accountName);

        // Assert
        assertEquals(expectedDefinition, actualDefinition);
    }

    @Test
    public void testFindEamDefnByTag72_BicCodeNotPresent() {
        // Arrange
        Block4Tag72 tag72 = new Block4Tag72();
        tag72.setBlock4Tag72Nar1("Some narrative without CPRB");
        String currencyCode = "USD";
        String accountName = "MAINACCOUNT";

        // Act
        EntityAccountMapDefinition actualDefinition = mxMsgHandler.findEamDefnByTag72(tag72, currencyCode, accountName);

        // Assert
        assertNull(actualDefinition);
    }

    @Test
    public void testFindEamDefnByTag72_Tag72IsNull() {
        // Arrange
        String currencyCode = "USD";
        String accountName = "MAINACCOUNT";

        // Act
        EntityAccountMapDefinition actualDefinition = mxMsgHandler.findEamDefnByTag72(null, currencyCode, accountName);

        // Assert
        assertNull(actualDefinition);
    }

    // Add more test cases to cover different scenarios, such as:
    // - Multiple narratives with CPRB
    // - BIC code with 'X' characters
    // - Currency code not found
    // - Account name not found
}
