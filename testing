package com.maybank.ilm.core.dao;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;

import com.maybank.ilm.core.dao.transformer.MatichingTxnTransformer;
import com.maybank.ilm.core.util.QueryConstants;
import com.maybank.ilm.dto.AccountBalanceAggregationDTO;
import com.maybank.ilm.dto.FundPositionDto;
import com.maybank.ilm.dto.paymentmessagedetails.MatchingTxnDTO;
import com.maybank.ilm.entity.AccountBalanceAggregation;
import com.maybank.ilm.entity.paymentmessagedetails.MetaFileInfo;

@Repository
public class PaymentMessageDaoImpl implements PaymentMessageDao {

	@Autowired
	private EntityManager em;

	@SuppressWarnings("unchecked")
	@Override
	public List<AccountBalanceAggregationDTO> findFundPosition(FundPositionDto positionDto, String queryStr ,List<LocalDate> holidaysList) {
		Query query = em.createNativeQuery(queryStr, AccountBalanceAggregation.class)
				.unwrap(org.hibernate.query.NativeQuery.class);
		query.setParameter("entityMapSkey", positionDto.getEntityAcctMapSkeyMain());
		query.setParameter("fromDate", positionDto.getStartDate());
		query.setParameter("toDate", positionDto.getEndDate());
		query.setParameter("rank", positionDto.getRank());
		if(!CollectionUtils.isEmpty(holidaysList)) {
			query.setParameter("holidays", holidaysList);
		}else {
			query.setParameter("holidays", LocalDate.now().plusDays(1));
		}
		List<AccountBalanceAggregation> accountBalanceAggregations= query.getResultList();
		List<AccountBalanceAggregationDTO> accountBalanceAggregaDtos=accountBalanceAggregations.stream().map(it->{
			AccountBalanceAggregationDTO balanceAggregationDTO=new AccountBalanceAggregationDTO();
			BeanUtils.copyProperties(it, balanceAggregationDTO);
			return balanceAggregationDTO;
		}).collect(Collectors.toList());
		return accountBalanceAggregaDtos;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<AccountBalanceAggregationDTO> findAllFundPosition(FundPositionDto positionDto, String queryStr ,List<LocalDate> holidaysList) {
		Query query = em.createNativeQuery(queryStr, AccountBalanceAggregation.class)
				.unwrap(org.hibernate.query.NativeQuery.class);
		query.setParameter("entityMapSkey", positionDto.getEntityAcctMapSkeyMain());
		query.setParameter("fromDate", positionDto.getStartDate());
		query.setParameter("toDate", positionDto.getEndDate());
		if(!CollectionUtils.isEmpty(holidaysList)) {
			query.setParameter("holidays", holidaysList);
		}else {
			query.setParameter("holidays", LocalDate.now().plusDays(1));
		}
		List<AccountBalanceAggregation> accountBalanceAggregations= query.getResultList();
		List<AccountBalanceAggregationDTO> accountBalanceAggregaDtos=accountBalanceAggregations.stream().map(it->{
			AccountBalanceAggregationDTO balanceAggregationDTO=new AccountBalanceAggregationDTO();
			BeanUtils.copyProperties(it, balanceAggregationDTO);
			return balanceAggregationDTO;
		}).collect(Collectors.toList());
		return accountBalanceAggregaDtos;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<AccountBalanceAggregationDTO> findFundPositionForNegativeCumulative(FundPositionDto positionDto, String queryStr ,List<LocalDate> holidaysList) {
		Query query = em.createNativeQuery(queryStr, AccountBalanceAggregation.class)
				.unwrap(org.hibernate.query.NativeQuery.class);
		query.setParameter("entityMapSkeyMain", positionDto.getEntityAcctMapSkeyMain());
		query.setParameter("fromDate", positionDto.getStartDate());
		query.setParameter("toDate", positionDto.getEndDate());
		query.setParameter("rank", positionDto.getRank());
		if(!CollectionUtils.isEmpty(holidaysList)) {
			query.setParameter("holidays", holidaysList);
		}else {
			query.setParameter("holidays", LocalDate.now().plusDays(1));
		}

		List<AccountBalanceAggregation> accountBalanceAggregations= query.getResultList();
		List<AccountBalanceAggregationDTO> accountBalanceAggregaDtos=accountBalanceAggregations.stream().map(it->{
			AccountBalanceAggregationDTO balanceAggregationDTO=new AccountBalanceAggregationDTO();
			BeanUtils.copyProperties(it, balanceAggregationDTO);
			return balanceAggregationDTO;
		}).collect(Collectors.toList());
		return accountBalanceAggregaDtos;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<AccountBalanceAggregationDTO> findAllFundPositionForNegativeCumulative(FundPositionDto positionDto, String queryStr ,List<LocalDate> holidaysList) {
		Query query = em.createNativeQuery(queryStr, AccountBalanceAggregation.class)
				.unwrap(org.hibernate.query.NativeQuery.class);
		query.setParameter("entityMapSkeyMain", positionDto.getEntityAcctMapSkeyMain());
		query.setParameter("fromDate", positionDto.getStartDate());
		query.setParameter("toDate", positionDto.getEndDate());
		if(!CollectionUtils.isEmpty(holidaysList)) {
			query.setParameter("holidays", holidaysList);
		}else {
			query.setParameter("holidays", LocalDate.now().plusDays(1));
		}
		List<AccountBalanceAggregation> accountBalanceAggregations= query.getResultList();
		List<AccountBalanceAggregationDTO> accountBalanceAggregaDtos=accountBalanceAggregations.stream().map(it->{
			AccountBalanceAggregationDTO balanceAggregationDTO=new AccountBalanceAggregationDTO();
			BeanUtils.copyProperties(it, balanceAggregationDTO);
			return balanceAggregationDTO;
		}).collect(Collectors.toList());
		return accountBalanceAggregaDtos;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<String> getMatchingTrxnsMembers(BigDecimal ratio, String entityBIC,LocalDate fromDate){
		Query query = em.createNativeQuery(QueryConstants.GETMATCHINGTRXNS).unwrap(org.hibernate.query.NativeQuery.class);
		query.setParameter("ratio", ratio);
		query.setParameter("entityBIC", entityBIC);
		query.setParameter("fromDate", fromDate);
		return query.getResultList();
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public List<MetaFileInfo> getMetaFileInfo(){
		Query query = em.createNamedQuery("GETMETAFILEINFO", MetaFileInfo.class);
		return query.getResultList();
	}
	@Override
	public List<MatchingTxnDTO> getMatchingTransaction(String entityBIC, LocalDate fromDate) {
		String query =QueryConstants.FINDMATCHINGTXN;
		Query qry = em.createNativeQuery(query).unwrap(org.hibernate.query.Query.class)
				.setResultTransformer(new MatichingTxnTransformer());
		qry.setParameter("fromDate", fromDate);
		qry.setParameter("entityBIC", entityBIC);
		return qry.getResultList();	
	}
}
