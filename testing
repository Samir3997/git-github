http://10.172.120.19:8013/ilm-web/trnPayment

{"analysisType":"SingleDay","countrySkey":1,"currencySkey":1,"entitySkey":1,"fromTime":"01-10-2024 00:00:00","nHighest":"1","paymentCase":0,"toTime":"02-10-2024 00:00:00","positionType":"lowest"}


{
    "timeSpendsInSeconds": 1,
    "status": "SUCCESS",
    "serviceName": "getTrnNHighest",
    "t": {
        "sentPayments": null,
        "recievedPayments": {},
        "sentPastPeriodPayments": null,
        "recievedPastPeriodPayments": null,
        "average": null
    }
}


@Controller
@RequestMapping("/")
public class PaymentPositionController {

	@PostMapping(value="/trnPayment")
	@ResponseBody
	@CrossOrigin("${cors.urls}")
	public ResponseEntity<CommonResponseEntity<PaymentPosDTO>> getTrnNHighest(@RequestBody PaymentPosParamsDTO paymentParams){
		LOGGER.info("PaymentPositionController {} getTrnNHighest",paymentParams.getFromTime());
		PaymentPosDTO paymentPosDto=paymentPos.getTRNPaymentDetails(paymentParams);
		return new ResponseEntity<>(new CommonResponseEntity<PaymentPosDTO>(1l, "SUCCESS", "getTrnNHighest", paymentPosDto),HttpStatus.OK);
	}
}

public interface PaymentPositionService {
public PaymentPosDTO getTRNPaymentDetails(PaymentPosParamsDTO paymentPosParams);
}


@Service
public class PaymentPositionServiceImpl implements PaymentPositionService {
@Override
	@Find(arguments = { "payment params DTO" }, returnType = "PaymentPositionDTo", type = "JSON")
	@FindNormEx
	public PaymentPosDTO getTRNPaymentDetails(PaymentPosParamsDTO paymentPosParams) {
		PaymentPosDTO paymentPosDTO = new PaymentPosDTO();
		List<Long> entityMapSkey = getEntitySkey(paymentPosParams);
		// Condition for Single day PAyment and PastPeriod Payment
		if (paymentPosParams.getAnalysisType().equalsIgnoreCase(ILMCoreConstants.SINGLE_DAY)) {
			paymentPosDTO = singleDayTRNPayment(paymentPosParams, entityMapSkey);
		} else {
			paymentPosDTO = pastPeriodTRNPayment(paymentPosParams, entityMapSkey);
		}
		return paymentPosDTO;
	}
	
	private PaymentPosDTO singleDayTRNPayment(PaymentPosParamsDTO paymentPosParams, List<Long> entityMapSkey) {
		Integer paymentCase = paymentPosParams.getPaymentCase();
		PaymentPosDTO paymentPosDTO = new PaymentPosDTO();
		Integer nHighest = paymentPosParams.getnHighest();
		LocalDateTime toDate = paymentPosParams.getToTime();
		LocalDateTime fromDate = paymentPosParams.getFromTime();
		Map<String, List<String>> TRNCode = getTRNCode();
		List<LocalDate> holidaysList = holidayMasterRepo.getHolidayDates(fromDate.toLocalDate(), toDate.toLocalDate(), paymentPosParams.getCurrencySkey());
		List<AccountBalanceManagement> acctBalMgmt = new ArrayList<AccountBalanceManagement>();
		if (paymentPosParams.getPositionType().compareTo("highest") == 0) {
			switch (paymentCase) {
			case 0:
				acctBalMgmt = paymentPosDao.getSingleDayTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.recievedTRN), ILMCoreConstants.plusSign, holidaysList);
				paymentPosDTO.setRecievedPayments(collectSingleDay(acctBalMgmt));
				break;
			case 1:
				acctBalMgmt = paymentPosDao.getSingleDayTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.sentTRN), ILMCoreConstants.negativeSign, holidaysList);
				paymentPosDTO.setSentPayments(collectSingleDay(acctBalMgmt));
				break;
			case 2:
				acctBalMgmt = paymentPosDao.getSingleDayTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.recievedTRN), ILMCoreConstants.plusSign, holidaysList);
				paymentPosDTO.setRecievedPayments(collectSingleDay(acctBalMgmt));
				acctBalMgmt = paymentPosDao.getSingleDayTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.sentTRN), ILMCoreConstants.negativeSign, holidaysList);

				paymentPosDTO.setSentPayments(collectSingleDay(acctBalMgmt));
				break;
			}
		} else {
			switch (paymentCase) {
			case 0:
				acctBalMgmt = paymentPosDao.getSingleDayLowestTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.recievedTRN), ILMCoreConstants.plusSign, holidaysList);
				paymentPosDTO.setRecievedPayments(collectSingleDay(acctBalMgmt));
				break;
			case 1:
				acctBalMgmt = paymentPosDao.getSingleDayLowestTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.sentTRN), ILMCoreConstants.negativeSign, holidaysList);
				paymentPosDTO.setSentPayments(collectSingleDay(acctBalMgmt));
				break;
			case 2:
				acctBalMgmt = paymentPosDao.getSingleDayLowestTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.recievedTRN), ILMCoreConstants.plusSign, holidaysList);
				paymentPosDTO.setRecievedPayments(collectSingleDay(acctBalMgmt));
				acctBalMgmt = paymentPosDao.getSingleDayLowestTRNPayments(nHighest, toDate, fromDate, entityMapSkey,
						TRNCode.get(ILMCoreConstants.sentTRN), ILMCoreConstants.negativeSign, holidaysList);

				paymentPosDTO.setSentPayments(collectSingleDay(acctBalMgmt));
				break;
			}
		}
		return paymentPosDTO;

	}


}
